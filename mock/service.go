// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach-cloud-sdk-go/pkg/client (interfaces: Service)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	http "net/http"
	reflect "reflect"

	client "github.com/cockroachdb/cockroach-cloud-sdk-go/pkg/client"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddAllowlistEntry mocks base method.
func (m *MockService) AddAllowlistEntry(arg0 context.Context, arg1 string, arg2 *client.AllowlistEntry) (*client.AllowlistEntry, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAllowlistEntry", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.AllowlistEntry)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAllowlistEntry indicates an expected call of AddAllowlistEntry.
func (mr *MockServiceMockRecorder) AddAllowlistEntry(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAllowlistEntry", reflect.TypeOf((*MockService)(nil).AddAllowlistEntry), arg0, arg1, arg2)
}

// AddAllowlistEntry2 mocks base method.
func (m *MockService) AddAllowlistEntry2(arg0 context.Context, arg1, arg2 string, arg3 int32, arg4 *client.AllowlistEntry1) (*client.AllowlistEntry, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAllowlistEntry2", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*client.AllowlistEntry)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAllowlistEntry2 indicates an expected call of AddAllowlistEntry2.
func (mr *MockServiceMockRecorder) AddAllowlistEntry2(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAllowlistEntry2", reflect.TypeOf((*MockService)(nil).AddAllowlistEntry2), arg0, arg1, arg2, arg3, arg4)
}

// AddEgressRule mocks base method.
func (m *MockService) AddEgressRule(arg0 context.Context, arg1 string, arg2 *client.AddEgressRuleRequest) (*client.AddEgressRuleResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEgressRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.AddEgressRuleResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddEgressRule indicates an expected call of AddEgressRule.
func (mr *MockServiceMockRecorder) AddEgressRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEgressRule", reflect.TypeOf((*MockService)(nil).AddEgressRule), arg0, arg1, arg2)
}

// AddPrivateEndpointConnection mocks base method.
func (m *MockService) AddPrivateEndpointConnection(arg0 context.Context, arg1 string, arg2 *client.AddPrivateEndpointConnectionRequest) (*client.PrivateEndpointConnection, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrivateEndpointConnection", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.PrivateEndpointConnection)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddPrivateEndpointConnection indicates an expected call of AddPrivateEndpointConnection.
func (mr *MockServiceMockRecorder) AddPrivateEndpointConnection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrivateEndpointConnection", reflect.TypeOf((*MockService)(nil).AddPrivateEndpointConnection), arg0, arg1, arg2)
}

// AddPrivateEndpointTrustedOwner mocks base method.
func (m *MockService) AddPrivateEndpointTrustedOwner(arg0 context.Context, arg1 string, arg2 *client.AddPrivateEndpointTrustedOwnerRequest) (*client.AddPrivateEndpointTrustedOwnerResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrivateEndpointTrustedOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.AddPrivateEndpointTrustedOwnerResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddPrivateEndpointTrustedOwner indicates an expected call of AddPrivateEndpointTrustedOwner.
func (mr *MockServiceMockRecorder) AddPrivateEndpointTrustedOwner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrivateEndpointTrustedOwner", reflect.TypeOf((*MockService)(nil).AddPrivateEndpointTrustedOwner), arg0, arg1, arg2)
}

// AddUserToRole mocks base method.
func (m *MockService) AddUserToRole(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*client.GetAllRolesForUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*client.GetAllRolesForUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddUserToRole indicates an expected call of AddUserToRole.
func (mr *MockServiceMockRecorder) AddUserToRole(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToRole", reflect.TypeOf((*MockService)(nil).AddUserToRole), arg0, arg1, arg2, arg3, arg4)
}

// CreateApiOidcConfig mocks base method.
func (m *MockService) CreateApiOidcConfig(arg0 context.Context, arg1 *client.CreateApiOidcConfigRequest) (*client.ApiOidcConfig, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiOidcConfig", arg0, arg1)
	ret0, _ := ret[0].(*client.ApiOidcConfig)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateApiOidcConfig indicates an expected call of CreateApiOidcConfig.
func (mr *MockServiceMockRecorder) CreateApiOidcConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiOidcConfig", reflect.TypeOf((*MockService)(nil).CreateApiOidcConfig), arg0, arg1)
}

// CreateCluster mocks base method.
func (m *MockService) CreateCluster(arg0 context.Context, arg1 *client.CreateClusterRequest) (*client.Cluster, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*client.Cluster)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockServiceMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockService)(nil).CreateCluster), arg0, arg1)
}

// CreateDatabase mocks base method.
func (m *MockService) CreateDatabase(arg0 context.Context, arg1 string, arg2 *client.CreateDatabaseRequest) (*client.Database, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.Database)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockServiceMockRecorder) CreateDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockService)(nil).CreateDatabase), arg0, arg1, arg2)
}

// CreateFolder mocks base method.
func (m *MockService) CreateFolder(arg0 context.Context, arg1 *client.CreateFolderRequest) (*client.FolderResource, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", arg0, arg1)
	ret0, _ := ret[0].(*client.FolderResource)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockServiceMockRecorder) CreateFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockService)(nil).CreateFolder), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockService) CreateGroup(arg0 context.Context, arg1 *client.CreateGroupRequest) (*client.ScimGroup, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(*client.ScimGroup)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockServiceMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockService)(nil).CreateGroup), arg0, arg1)
}

// CreatePrivateEndpointServices mocks base method.
func (m *MockService) CreatePrivateEndpointServices(arg0 context.Context, arg1 string) (*client.PrivateEndpointServices, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateEndpointServices", arg0, arg1)
	ret0, _ := ret[0].(*client.PrivateEndpointServices)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePrivateEndpointServices indicates an expected call of CreatePrivateEndpointServices.
func (mr *MockServiceMockRecorder) CreatePrivateEndpointServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateEndpointServices", reflect.TypeOf((*MockService)(nil).CreatePrivateEndpointServices), arg0, arg1)
}

// CreateSQLUser mocks base method.
func (m *MockService) CreateSQLUser(arg0 context.Context, arg1 string, arg2 *client.CreateSQLUserRequest) (*client.SQLUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSQLUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.SQLUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSQLUser indicates an expected call of CreateSQLUser.
func (mr *MockServiceMockRecorder) CreateSQLUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSQLUser", reflect.TypeOf((*MockService)(nil).CreateSQLUser), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(arg0 context.Context, arg1 *client.CreateUserRequest) (*client.ScimUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*client.ScimUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), arg0, arg1)
}

// DeleteAllowlistEntry mocks base method.
func (m *MockService) DeleteAllowlistEntry(arg0 context.Context, arg1, arg2 string, arg3 int32) (*client.AllowlistEntry, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllowlistEntry", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*client.AllowlistEntry)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteAllowlistEntry indicates an expected call of DeleteAllowlistEntry.
func (mr *MockServiceMockRecorder) DeleteAllowlistEntry(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllowlistEntry", reflect.TypeOf((*MockService)(nil).DeleteAllowlistEntry), arg0, arg1, arg2, arg3)
}

// DeleteApiOidcConfig mocks base method.
func (m *MockService) DeleteApiOidcConfig(arg0 context.Context, arg1 string) (*client.ApiOidcConfig, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiOidcConfig", arg0, arg1)
	ret0, _ := ret[0].(*client.ApiOidcConfig)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteApiOidcConfig indicates an expected call of DeleteApiOidcConfig.
func (mr *MockServiceMockRecorder) DeleteApiOidcConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiOidcConfig", reflect.TypeOf((*MockService)(nil).DeleteApiOidcConfig), arg0, arg1)
}

// DeleteClientCACert mocks base method.
func (m *MockService) DeleteClientCACert(arg0 context.Context, arg1 string) (*client.ClientCACertInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientCACert", arg0, arg1)
	ret0, _ := ret[0].(*client.ClientCACertInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteClientCACert indicates an expected call of DeleteClientCACert.
func (mr *MockServiceMockRecorder) DeleteClientCACert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientCACert", reflect.TypeOf((*MockService)(nil).DeleteClientCACert), arg0, arg1)
}

// DeleteCloudWatchMetricExport mocks base method.
func (m *MockService) DeleteCloudWatchMetricExport(arg0 context.Context, arg1 string) (*client.DeleteMetricExportResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudWatchMetricExport", arg0, arg1)
	ret0, _ := ret[0].(*client.DeleteMetricExportResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteCloudWatchMetricExport indicates an expected call of DeleteCloudWatchMetricExport.
func (mr *MockServiceMockRecorder) DeleteCloudWatchMetricExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudWatchMetricExport", reflect.TypeOf((*MockService)(nil).DeleteCloudWatchMetricExport), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockService) DeleteCluster(arg0 context.Context, arg1 string) (*client.Cluster, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(*client.Cluster)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockServiceMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockService)(nil).DeleteCluster), arg0, arg1)
}

// DeleteDatabase mocks base method.
func (m *MockService) DeleteDatabase(arg0 context.Context, arg1, arg2 string) (*client.Database, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabase", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.Database)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteDatabase indicates an expected call of DeleteDatabase.
func (mr *MockServiceMockRecorder) DeleteDatabase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockService)(nil).DeleteDatabase), arg0, arg1, arg2)
}

// DeleteDatadogMetricExport mocks base method.
func (m *MockService) DeleteDatadogMetricExport(arg0 context.Context, arg1 string) (*client.DeleteMetricExportResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatadogMetricExport", arg0, arg1)
	ret0, _ := ret[0].(*client.DeleteMetricExportResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteDatadogMetricExport indicates an expected call of DeleteDatadogMetricExport.
func (mr *MockServiceMockRecorder) DeleteDatadogMetricExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatadogMetricExport", reflect.TypeOf((*MockService)(nil).DeleteDatadogMetricExport), arg0, arg1)
}

// DeleteEgressRule mocks base method.
func (m *MockService) DeleteEgressRule(arg0 context.Context, arg1, arg2 string, arg3 *client.DeleteEgressRuleOptions) (*client.DeleteEgressRuleResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEgressRule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*client.DeleteEgressRuleResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteEgressRule indicates an expected call of DeleteEgressRule.
func (mr *MockServiceMockRecorder) DeleteEgressRule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEgressRule", reflect.TypeOf((*MockService)(nil).DeleteEgressRule), arg0, arg1, arg2, arg3)
}

// DeleteFolder mocks base method.
func (m *MockService) DeleteFolder(arg0 context.Context, arg1 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockServiceMockRecorder) DeleteFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockService)(nil).DeleteFolder), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockService) DeleteGroup(arg0 context.Context, arg1 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockServiceMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockService)(nil).DeleteGroup), arg0, arg1)
}

// DeleteLogExport mocks base method.
func (m *MockService) DeleteLogExport(arg0 context.Context, arg1 string) (*client.LogExportClusterInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogExport", arg0, arg1)
	ret0, _ := ret[0].(*client.LogExportClusterInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteLogExport indicates an expected call of DeleteLogExport.
func (mr *MockServiceMockRecorder) DeleteLogExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogExport", reflect.TypeOf((*MockService)(nil).DeleteLogExport), arg0, arg1)
}

// DeleteMaintenanceWindow mocks base method.
func (m *MockService) DeleteMaintenanceWindow(arg0 context.Context, arg1 string) (*client.MaintenanceWindow, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMaintenanceWindow", arg0, arg1)
	ret0, _ := ret[0].(*client.MaintenanceWindow)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteMaintenanceWindow indicates an expected call of DeleteMaintenanceWindow.
func (mr *MockServiceMockRecorder) DeleteMaintenanceWindow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMaintenanceWindow", reflect.TypeOf((*MockService)(nil).DeleteMaintenanceWindow), arg0, arg1)
}

// DeletePrivateEndpointConnection mocks base method.
func (m *MockService) DeletePrivateEndpointConnection(arg0 context.Context, arg1, arg2 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateEndpointConnection", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivateEndpointConnection indicates an expected call of DeletePrivateEndpointConnection.
func (mr *MockServiceMockRecorder) DeletePrivateEndpointConnection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateEndpointConnection", reflect.TypeOf((*MockService)(nil).DeletePrivateEndpointConnection), arg0, arg1, arg2)
}

// DeletePrometheusMetricExport mocks base method.
func (m *MockService) DeletePrometheusMetricExport(arg0 context.Context, arg1 string) (*client.DeleteMetricExportResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrometheusMetricExport", arg0, arg1)
	ret0, _ := ret[0].(*client.DeleteMetricExportResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeletePrometheusMetricExport indicates an expected call of DeletePrometheusMetricExport.
func (mr *MockServiceMockRecorder) DeletePrometheusMetricExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrometheusMetricExport", reflect.TypeOf((*MockService)(nil).DeletePrometheusMetricExport), arg0, arg1)
}

// DeleteSQLUser mocks base method.
func (m *MockService) DeleteSQLUser(arg0 context.Context, arg1, arg2 string) (*client.SQLUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSQLUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.SQLUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteSQLUser indicates an expected call of DeleteSQLUser.
func (mr *MockServiceMockRecorder) DeleteSQLUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSQLUser", reflect.TypeOf((*MockService)(nil).DeleteSQLUser), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockService) DeleteUser(arg0 context.Context, arg1 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockServiceMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockService)(nil).DeleteUser), arg0, arg1)
}

// EditDatabase mocks base method.
func (m *MockService) EditDatabase(arg0 context.Context, arg1, arg2 string, arg3 *client.UpdateDatabaseRequest1) (*client.Database, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditDatabase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*client.Database)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditDatabase indicates an expected call of EditDatabase.
func (mr *MockServiceMockRecorder) EditDatabase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditDatabase", reflect.TypeOf((*MockService)(nil).EditDatabase), arg0, arg1, arg2, arg3)
}

// EditDatabase2 mocks base method.
func (m *MockService) EditDatabase2(arg0 context.Context, arg1 string, arg2 *client.UpdateDatabaseRequest) (*client.Database, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditDatabase2", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.Database)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditDatabase2 indicates an expected call of EditDatabase2.
func (mr *MockServiceMockRecorder) EditDatabase2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditDatabase2", reflect.TypeOf((*MockService)(nil).EditDatabase2), arg0, arg1, arg2)
}

// EditEgressRule mocks base method.
func (m *MockService) EditEgressRule(arg0 context.Context, arg1, arg2 string, arg3 *client.EditEgressRuleRequest) (*client.EditEgressRuleResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditEgressRule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*client.EditEgressRuleResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditEgressRule indicates an expected call of EditEgressRule.
func (mr *MockServiceMockRecorder) EditEgressRule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEgressRule", reflect.TypeOf((*MockService)(nil).EditEgressRule), arg0, arg1, arg2, arg3)
}

// EnableCMEKSpec mocks base method.
func (m *MockService) EnableCMEKSpec(arg0 context.Context, arg1 string, arg2 *client.CMEKClusterSpecification) (*client.CMEKClusterInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCMEKSpec", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.CMEKClusterInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableCMEKSpec indicates an expected call of EnableCMEKSpec.
func (mr *MockServiceMockRecorder) EnableCMEKSpec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCMEKSpec", reflect.TypeOf((*MockService)(nil).EnableCMEKSpec), arg0, arg1, arg2)
}

// EnableCloudWatchMetricExport mocks base method.
func (m *MockService) EnableCloudWatchMetricExport(arg0 context.Context, arg1 string, arg2 *client.EnableCloudWatchMetricExportRequest) (*client.CloudWatchMetricExportInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCloudWatchMetricExport", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.CloudWatchMetricExportInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableCloudWatchMetricExport indicates an expected call of EnableCloudWatchMetricExport.
func (mr *MockServiceMockRecorder) EnableCloudWatchMetricExport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCloudWatchMetricExport", reflect.TypeOf((*MockService)(nil).EnableCloudWatchMetricExport), arg0, arg1, arg2)
}

// EnableDatadogMetricExport mocks base method.
func (m *MockService) EnableDatadogMetricExport(arg0 context.Context, arg1 string, arg2 *client.EnableDatadogMetricExportRequest) (*client.DatadogMetricExportInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDatadogMetricExport", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.DatadogMetricExportInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableDatadogMetricExport indicates an expected call of EnableDatadogMetricExport.
func (mr *MockServiceMockRecorder) EnableDatadogMetricExport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDatadogMetricExport", reflect.TypeOf((*MockService)(nil).EnableDatadogMetricExport), arg0, arg1, arg2)
}

// EnableLogExport mocks base method.
func (m *MockService) EnableLogExport(arg0 context.Context, arg1 string, arg2 *client.EnableLogExportRequest) (*client.LogExportClusterInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableLogExport", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.LogExportClusterInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableLogExport indicates an expected call of EnableLogExport.
func (mr *MockServiceMockRecorder) EnableLogExport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableLogExport", reflect.TypeOf((*MockService)(nil).EnableLogExport), arg0, arg1, arg2)
}

// EnablePrometheusMetricExport mocks base method.
func (m *MockService) EnablePrometheusMetricExport(arg0 context.Context, arg1 string, arg2 *map[string]interface{}) (*client.PrometheusMetricExportInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePrometheusMetricExport", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.PrometheusMetricExportInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnablePrometheusMetricExport indicates an expected call of EnablePrometheusMetricExport.
func (mr *MockServiceMockRecorder) EnablePrometheusMetricExport(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePrometheusMetricExport", reflect.TypeOf((*MockService)(nil).EnablePrometheusMetricExport), arg0, arg1, arg2)
}

// GetAllRolesForUser mocks base method.
func (m *MockService) GetAllRolesForUser(arg0 context.Context, arg1 string) (*client.GetAllRolesForUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRolesForUser", arg0, arg1)
	ret0, _ := ret[0].(*client.GetAllRolesForUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllRolesForUser indicates an expected call of GetAllRolesForUser.
func (mr *MockServiceMockRecorder) GetAllRolesForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRolesForUser", reflect.TypeOf((*MockService)(nil).GetAllRolesForUser), arg0, arg1)
}

// GetApiOidcConfig mocks base method.
func (m *MockService) GetApiOidcConfig(arg0 context.Context, arg1 string) (*client.ApiOidcConfig, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiOidcConfig", arg0, arg1)
	ret0, _ := ret[0].(*client.ApiOidcConfig)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApiOidcConfig indicates an expected call of GetApiOidcConfig.
func (mr *MockServiceMockRecorder) GetApiOidcConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiOidcConfig", reflect.TypeOf((*MockService)(nil).GetApiOidcConfig), arg0, arg1)
}

// GetCMEKClusterInfo mocks base method.
func (m *MockService) GetCMEKClusterInfo(arg0 context.Context, arg1 string) (*client.CMEKClusterInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCMEKClusterInfo", arg0, arg1)
	ret0, _ := ret[0].(*client.CMEKClusterInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCMEKClusterInfo indicates an expected call of GetCMEKClusterInfo.
func (mr *MockServiceMockRecorder) GetCMEKClusterInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCMEKClusterInfo", reflect.TypeOf((*MockService)(nil).GetCMEKClusterInfo), arg0, arg1)
}

// GetClientCACert mocks base method.
func (m *MockService) GetClientCACert(arg0 context.Context, arg1 string) (*client.ClientCACertInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientCACert", arg0, arg1)
	ret0, _ := ret[0].(*client.ClientCACertInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClientCACert indicates an expected call of GetClientCACert.
func (mr *MockServiceMockRecorder) GetClientCACert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCACert", reflect.TypeOf((*MockService)(nil).GetClientCACert), arg0, arg1)
}

// GetCloudWatchMetricExportInfo mocks base method.
func (m *MockService) GetCloudWatchMetricExportInfo(arg0 context.Context, arg1 string) (*client.CloudWatchMetricExportInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudWatchMetricExportInfo", arg0, arg1)
	ret0, _ := ret[0].(*client.CloudWatchMetricExportInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCloudWatchMetricExportInfo indicates an expected call of GetCloudWatchMetricExportInfo.
func (mr *MockServiceMockRecorder) GetCloudWatchMetricExportInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudWatchMetricExportInfo", reflect.TypeOf((*MockService)(nil).GetCloudWatchMetricExportInfo), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockService) GetCluster(arg0 context.Context, arg1 string) (*client.Cluster, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*client.Cluster)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockServiceMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockService)(nil).GetCluster), arg0, arg1)
}

// GetClusterVersionDeferral mocks base method.
func (m *MockService) GetClusterVersionDeferral(arg0 context.Context, arg1 string) (*client.ClusterVersionDeferral, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterVersionDeferral", arg0, arg1)
	ret0, _ := ret[0].(*client.ClusterVersionDeferral)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterVersionDeferral indicates an expected call of GetClusterVersionDeferral.
func (mr *MockServiceMockRecorder) GetClusterVersionDeferral(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterVersionDeferral", reflect.TypeOf((*MockService)(nil).GetClusterVersionDeferral), arg0, arg1)
}

// GetConnectionString mocks base method.
func (m *MockService) GetConnectionString(arg0 context.Context, arg1 string, arg2 *client.GetConnectionStringOptions) (*client.GetConnectionStringResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionString", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.GetConnectionStringResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConnectionString indicates an expected call of GetConnectionString.
func (mr *MockServiceMockRecorder) GetConnectionString(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionString", reflect.TypeOf((*MockService)(nil).GetConnectionString), arg0, arg1, arg2)
}

// GetDatadogMetricExportInfo mocks base method.
func (m *MockService) GetDatadogMetricExportInfo(arg0 context.Context, arg1 string) (*client.DatadogMetricExportInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatadogMetricExportInfo", arg0, arg1)
	ret0, _ := ret[0].(*client.DatadogMetricExportInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDatadogMetricExportInfo indicates an expected call of GetDatadogMetricExportInfo.
func (mr *MockServiceMockRecorder) GetDatadogMetricExportInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatadogMetricExportInfo", reflect.TypeOf((*MockService)(nil).GetDatadogMetricExportInfo), arg0, arg1)
}

// GetEgressRule mocks base method.
func (m *MockService) GetEgressRule(arg0 context.Context, arg1, arg2 string) (*client.GetEgressRuleResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEgressRule", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.GetEgressRuleResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEgressRule indicates an expected call of GetEgressRule.
func (mr *MockServiceMockRecorder) GetEgressRule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEgressRule", reflect.TypeOf((*MockService)(nil).GetEgressRule), arg0, arg1, arg2)
}

// GetFolder mocks base method.
func (m *MockService) GetFolder(arg0 context.Context, arg1 string) (*client.FolderResource, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolder", arg0, arg1)
	ret0, _ := ret[0].(*client.FolderResource)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFolder indicates an expected call of GetFolder.
func (mr *MockServiceMockRecorder) GetFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolder", reflect.TypeOf((*MockService)(nil).GetFolder), arg0, arg1)
}

// GetGroup mocks base method.
func (m *MockService) GetGroup(arg0 context.Context, arg1 string, arg2 *client.GetGroupOptions) (*client.ScimGroup, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ScimGroup)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockServiceMockRecorder) GetGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockService)(nil).GetGroup), arg0, arg1, arg2)
}

// GetGroup2 mocks base method.
func (m *MockService) GetGroup2(arg0 context.Context, arg1 string, arg2 *client.GetGroupRequest) (*client.ScimGroup, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup2", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ScimGroup)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroup2 indicates an expected call of GetGroup2.
func (mr *MockServiceMockRecorder) GetGroup2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup2", reflect.TypeOf((*MockService)(nil).GetGroup2), arg0, arg1, arg2)
}

// GetGroups mocks base method.
func (m *MockService) GetGroups(arg0 context.Context, arg1 *client.GetGroupsOptions) (*client.GetGroupsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0, arg1)
	ret0, _ := ret[0].(*client.GetGroupsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockServiceMockRecorder) GetGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockService)(nil).GetGroups), arg0, arg1)
}

// GetGroups2 mocks base method.
func (m *MockService) GetGroups2(arg0 context.Context, arg1 *client.GetGroupsRequest) (*client.GetGroupsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups2", arg0, arg1)
	ret0, _ := ret[0].(*client.GetGroupsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroups2 indicates an expected call of GetGroups2.
func (mr *MockServiceMockRecorder) GetGroups2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups2", reflect.TypeOf((*MockService)(nil).GetGroups2), arg0, arg1)
}

// GetInvoice mocks base method.
func (m *MockService) GetInvoice(arg0 context.Context, arg1 string) (*client.Invoice, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoice", arg0, arg1)
	ret0, _ := ret[0].(*client.Invoice)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInvoice indicates an expected call of GetInvoice.
func (mr *MockServiceMockRecorder) GetInvoice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoice", reflect.TypeOf((*MockService)(nil).GetInvoice), arg0, arg1)
}

// GetLogExportInfo mocks base method.
func (m *MockService) GetLogExportInfo(arg0 context.Context, arg1 string) (*client.LogExportClusterInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogExportInfo", arg0, arg1)
	ret0, _ := ret[0].(*client.LogExportClusterInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLogExportInfo indicates an expected call of GetLogExportInfo.
func (mr *MockServiceMockRecorder) GetLogExportInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogExportInfo", reflect.TypeOf((*MockService)(nil).GetLogExportInfo), arg0, arg1)
}

// GetMaintenanceWindow mocks base method.
func (m *MockService) GetMaintenanceWindow(arg0 context.Context, arg1 string) (*client.MaintenanceWindow, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaintenanceWindow", arg0, arg1)
	ret0, _ := ret[0].(*client.MaintenanceWindow)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMaintenanceWindow indicates an expected call of GetMaintenanceWindow.
func (mr *MockServiceMockRecorder) GetMaintenanceWindow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceWindow", reflect.TypeOf((*MockService)(nil).GetMaintenanceWindow), arg0, arg1)
}

// GetOrganizationInfo mocks base method.
func (m *MockService) GetOrganizationInfo(arg0 context.Context) (*client.Organization, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationInfo", arg0)
	ret0, _ := ret[0].(*client.Organization)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationInfo indicates an expected call of GetOrganizationInfo.
func (mr *MockServiceMockRecorder) GetOrganizationInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationInfo", reflect.TypeOf((*MockService)(nil).GetOrganizationInfo), arg0)
}

// GetPersonUsersByEmail mocks base method.
func (m *MockService) GetPersonUsersByEmail(arg0 context.Context, arg1 *string) (*client.GetPersonUsersByEmailResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonUsersByEmail", arg0, arg1)
	ret0, _ := ret[0].(*client.GetPersonUsersByEmailResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPersonUsersByEmail indicates an expected call of GetPersonUsersByEmail.
func (mr *MockServiceMockRecorder) GetPersonUsersByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonUsersByEmail", reflect.TypeOf((*MockService)(nil).GetPersonUsersByEmail), arg0, arg1)
}

// GetPrivateEndpointTrustedOwner mocks base method.
func (m *MockService) GetPrivateEndpointTrustedOwner(arg0 context.Context, arg1, arg2 string) (*client.GetPrivateEndpointTrustedOwnerResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateEndpointTrustedOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.GetPrivateEndpointTrustedOwnerResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateEndpointTrustedOwner indicates an expected call of GetPrivateEndpointTrustedOwner.
func (mr *MockServiceMockRecorder) GetPrivateEndpointTrustedOwner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateEndpointTrustedOwner", reflect.TypeOf((*MockService)(nil).GetPrivateEndpointTrustedOwner), arg0, arg1, arg2)
}

// GetPrometheusMetricExportInfo mocks base method.
func (m *MockService) GetPrometheusMetricExportInfo(arg0 context.Context, arg1 string) (*client.PrometheusMetricExportInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrometheusMetricExportInfo", arg0, arg1)
	ret0, _ := ret[0].(*client.PrometheusMetricExportInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrometheusMetricExportInfo indicates an expected call of GetPrometheusMetricExportInfo.
func (mr *MockServiceMockRecorder) GetPrometheusMetricExportInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrometheusMetricExportInfo", reflect.TypeOf((*MockService)(nil).GetPrometheusMetricExportInfo), arg0, arg1)
}

// GetResourceType mocks base method.
func (m *MockService) GetResourceType(arg0 context.Context, arg1 string, arg2 *client.GetResourceTypeOptions) (*client.ScimResourceType, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceType", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ScimResourceType)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResourceType indicates an expected call of GetResourceType.
func (mr *MockServiceMockRecorder) GetResourceType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceType", reflect.TypeOf((*MockService)(nil).GetResourceType), arg0, arg1, arg2)
}

// GetResourceTypes mocks base method.
func (m *MockService) GetResourceTypes(arg0 context.Context, arg1 *client.GetResourceTypesOptions) (*client.GetResourceTypesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceTypes", arg0, arg1)
	ret0, _ := ret[0].(*client.GetResourceTypesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResourceTypes indicates an expected call of GetResourceTypes.
func (mr *MockServiceMockRecorder) GetResourceTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceTypes", reflect.TypeOf((*MockService)(nil).GetResourceTypes), arg0, arg1)
}

// GetSchema mocks base method.
func (m *MockService) GetSchema(arg0 context.Context, arg1 string, arg2 *client.GetSchemaOptions) (*client.ScimSchema, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ScimSchema)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockServiceMockRecorder) GetSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockService)(nil).GetSchema), arg0, arg1, arg2)
}

// GetSchemas mocks base method.
func (m *MockService) GetSchemas(arg0 context.Context, arg1 *client.GetSchemasOptions) (*client.GetSchemasResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemas", arg0, arg1)
	ret0, _ := ret[0].(*client.GetSchemasResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSchemas indicates an expected call of GetSchemas.
func (mr *MockServiceMockRecorder) GetSchemas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemas", reflect.TypeOf((*MockService)(nil).GetSchemas), arg0, arg1)
}

// GetServiceProviderConfig mocks base method.
func (m *MockService) GetServiceProviderConfig(arg0 context.Context) (*client.GetServiceProviderConfigResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceProviderConfig", arg0)
	ret0, _ := ret[0].(*client.GetServiceProviderConfigResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServiceProviderConfig indicates an expected call of GetServiceProviderConfig.
func (mr *MockServiceMockRecorder) GetServiceProviderConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceProviderConfig", reflect.TypeOf((*MockService)(nil).GetServiceProviderConfig), arg0)
}

// GetUser mocks base method.
func (m *MockService) GetUser(arg0 context.Context, arg1 string, arg2 *client.GetUserOptions) (*client.ScimUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ScimUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser indicates an expected call of GetUser.
func (mr *MockServiceMockRecorder) GetUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockService)(nil).GetUser), arg0, arg1, arg2)
}

// GetUser2 mocks base method.
func (m *MockService) GetUser2(arg0 context.Context, arg1 string, arg2 *client.GetUserRequest) (*client.ScimUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser2", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ScimUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser2 indicates an expected call of GetUser2.
func (mr *MockServiceMockRecorder) GetUser2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser2", reflect.TypeOf((*MockService)(nil).GetUser2), arg0, arg1, arg2)
}

// GetUsers mocks base method.
func (m *MockService) GetUsers(arg0 context.Context, arg1 *client.GetUsersOptions) (*client.GetUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*client.GetUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockServiceMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockService)(nil).GetUsers), arg0, arg1)
}

// GetUsers2 mocks base method.
func (m *MockService) GetUsers2(arg0 context.Context, arg1 *client.GetUsersRequest) (*client.GetUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers2", arg0, arg1)
	ret0, _ := ret[0].(*client.GetUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers2 indicates an expected call of GetUsers2.
func (mr *MockServiceMockRecorder) GetUsers2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers2", reflect.TypeOf((*MockService)(nil).GetUsers2), arg0, arg1)
}

// ListAllowlistEntries mocks base method.
func (m *MockService) ListAllowlistEntries(arg0 context.Context, arg1 string, arg2 *client.ListAllowlistEntriesOptions) (*client.ListAllowlistEntriesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllowlistEntries", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ListAllowlistEntriesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllowlistEntries indicates an expected call of ListAllowlistEntries.
func (mr *MockServiceMockRecorder) ListAllowlistEntries(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllowlistEntries", reflect.TypeOf((*MockService)(nil).ListAllowlistEntries), arg0, arg1, arg2)
}

// ListApiOidcConfig mocks base method.
func (m *MockService) ListApiOidcConfig(arg0 context.Context, arg1 *client.ListApiOidcConfigOptions) (*client.ListApiOidcConfigResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApiOidcConfig", arg0, arg1)
	ret0, _ := ret[0].(*client.ListApiOidcConfigResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApiOidcConfig indicates an expected call of ListApiOidcConfig.
func (mr *MockServiceMockRecorder) ListApiOidcConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiOidcConfig", reflect.TypeOf((*MockService)(nil).ListApiOidcConfig), arg0, arg1)
}

// ListAuditLogs mocks base method.
func (m *MockService) ListAuditLogs(arg0 context.Context, arg1 *client.ListAuditLogsOptions) (*client.ListAuditLogsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuditLogs", arg0, arg1)
	ret0, _ := ret[0].(*client.ListAuditLogsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockServiceMockRecorder) ListAuditLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockService)(nil).ListAuditLogs), arg0, arg1)
}

// ListAvailableRegions mocks base method.
func (m *MockService) ListAvailableRegions(arg0 context.Context, arg1 *client.ListAvailableRegionsOptions) (*client.ListAvailableRegionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableRegions", arg0, arg1)
	ret0, _ := ret[0].(*client.ListAvailableRegionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAvailableRegions indicates an expected call of ListAvailableRegions.
func (mr *MockServiceMockRecorder) ListAvailableRegions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableRegions", reflect.TypeOf((*MockService)(nil).ListAvailableRegions), arg0, arg1)
}

// ListAwsEndpointConnections mocks base method.
func (m *MockService) ListAwsEndpointConnections(arg0 context.Context, arg1 string) (*client.AwsEndpointConnections, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAwsEndpointConnections", arg0, arg1)
	ret0, _ := ret[0].(*client.AwsEndpointConnections)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAwsEndpointConnections indicates an expected call of ListAwsEndpointConnections.
func (mr *MockServiceMockRecorder) ListAwsEndpointConnections(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAwsEndpointConnections", reflect.TypeOf((*MockService)(nil).ListAwsEndpointConnections), arg0, arg1)
}

// ListClusterNodes mocks base method.
func (m *MockService) ListClusterNodes(arg0 context.Context, arg1 string, arg2 *client.ListClusterNodesOptions) (*client.ListClusterNodesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterNodes", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ListClusterNodesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListClusterNodes indicates an expected call of ListClusterNodes.
func (mr *MockServiceMockRecorder) ListClusterNodes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterNodes", reflect.TypeOf((*MockService)(nil).ListClusterNodes), arg0, arg1, arg2)
}

// ListClusters mocks base method.
func (m *MockService) ListClusters(arg0 context.Context, arg1 *client.ListClustersOptions) (*client.ListClustersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0, arg1)
	ret0, _ := ret[0].(*client.ListClustersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockServiceMockRecorder) ListClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockService)(nil).ListClusters), arg0, arg1)
}

// ListDatabases mocks base method.
func (m *MockService) ListDatabases(arg0 context.Context, arg1 string, arg2 *client.ListDatabasesOptions) (*client.ListDatabasesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ListDatabasesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockServiceMockRecorder) ListDatabases(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockService)(nil).ListDatabases), arg0, arg1, arg2)
}

// ListEgressRules mocks base method.
func (m *MockService) ListEgressRules(arg0 context.Context, arg1 string, arg2 *client.ListEgressRulesOptions) (*client.ListEgressRulesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEgressRules", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ListEgressRulesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEgressRules indicates an expected call of ListEgressRules.
func (mr *MockServiceMockRecorder) ListEgressRules(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEgressRules", reflect.TypeOf((*MockService)(nil).ListEgressRules), arg0, arg1, arg2)
}

// ListFolderContents mocks base method.
func (m *MockService) ListFolderContents(arg0 context.Context, arg1 string, arg2 *client.ListFolderContentsOptions) (*client.FolderResourceList, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolderContents", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.FolderResourceList)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFolderContents indicates an expected call of ListFolderContents.
func (mr *MockServiceMockRecorder) ListFolderContents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolderContents", reflect.TypeOf((*MockService)(nil).ListFolderContents), arg0, arg1, arg2)
}

// ListInvoices mocks base method.
func (m *MockService) ListInvoices(arg0 context.Context) (*client.ListInvoicesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoices", arg0)
	ret0, _ := ret[0].(*client.ListInvoicesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInvoices indicates an expected call of ListInvoices.
func (mr *MockServiceMockRecorder) ListInvoices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoices", reflect.TypeOf((*MockService)(nil).ListInvoices), arg0)
}

// ListMajorClusterVersions mocks base method.
func (m *MockService) ListMajorClusterVersions(arg0 context.Context, arg1 *client.ListMajorClusterVersionsOptions) (*client.ListMajorClusterVersionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMajorClusterVersions", arg0, arg1)
	ret0, _ := ret[0].(*client.ListMajorClusterVersionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMajorClusterVersions indicates an expected call of ListMajorClusterVersions.
func (mr *MockServiceMockRecorder) ListMajorClusterVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMajorClusterVersions", reflect.TypeOf((*MockService)(nil).ListMajorClusterVersions), arg0, arg1)
}

// ListPrivateEndpointConnections mocks base method.
func (m *MockService) ListPrivateEndpointConnections(arg0 context.Context, arg1 string) (*client.PrivateEndpointConnections, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateEndpointConnections", arg0, arg1)
	ret0, _ := ret[0].(*client.PrivateEndpointConnections)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPrivateEndpointConnections indicates an expected call of ListPrivateEndpointConnections.
func (mr *MockServiceMockRecorder) ListPrivateEndpointConnections(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateEndpointConnections", reflect.TypeOf((*MockService)(nil).ListPrivateEndpointConnections), arg0, arg1)
}

// ListPrivateEndpointServices mocks base method.
func (m *MockService) ListPrivateEndpointServices(arg0 context.Context, arg1 string) (*client.PrivateEndpointServices, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateEndpointServices", arg0, arg1)
	ret0, _ := ret[0].(*client.PrivateEndpointServices)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPrivateEndpointServices indicates an expected call of ListPrivateEndpointServices.
func (mr *MockServiceMockRecorder) ListPrivateEndpointServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateEndpointServices", reflect.TypeOf((*MockService)(nil).ListPrivateEndpointServices), arg0, arg1)
}

// ListPrivateEndpointTrustedOwners mocks base method.
func (m *MockService) ListPrivateEndpointTrustedOwners(arg0 context.Context, arg1 string) (*client.ListPrivateEndpointTrustedOwnersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateEndpointTrustedOwners", arg0, arg1)
	ret0, _ := ret[0].(*client.ListPrivateEndpointTrustedOwnersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPrivateEndpointTrustedOwners indicates an expected call of ListPrivateEndpointTrustedOwners.
func (mr *MockServiceMockRecorder) ListPrivateEndpointTrustedOwners(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateEndpointTrustedOwners", reflect.TypeOf((*MockService)(nil).ListPrivateEndpointTrustedOwners), arg0, arg1)
}

// ListRoleGrants mocks base method.
func (m *MockService) ListRoleGrants(arg0 context.Context, arg1 *client.ListRoleGrantsOptions) (*client.ListRoleGrantsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleGrants", arg0, arg1)
	ret0, _ := ret[0].(*client.ListRoleGrantsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRoleGrants indicates an expected call of ListRoleGrants.
func (mr *MockServiceMockRecorder) ListRoleGrants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleGrants", reflect.TypeOf((*MockService)(nil).ListRoleGrants), arg0, arg1)
}

// ListSQLUsers mocks base method.
func (m *MockService) ListSQLUsers(arg0 context.Context, arg1 string, arg2 *client.ListSQLUsersOptions) (*client.ListSQLUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSQLUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ListSQLUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSQLUsers indicates an expected call of ListSQLUsers.
func (mr *MockServiceMockRecorder) ListSQLUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSQLUsers", reflect.TypeOf((*MockService)(nil).ListSQLUsers), arg0, arg1, arg2)
}

// RemovePrivateEndpointTrustedOwner mocks base method.
func (m *MockService) RemovePrivateEndpointTrustedOwner(arg0 context.Context, arg1, arg2 string) (*client.RemovePrivateEndpointTrustedOwnerResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePrivateEndpointTrustedOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.RemovePrivateEndpointTrustedOwnerResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemovePrivateEndpointTrustedOwner indicates an expected call of RemovePrivateEndpointTrustedOwner.
func (mr *MockServiceMockRecorder) RemovePrivateEndpointTrustedOwner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePrivateEndpointTrustedOwner", reflect.TypeOf((*MockService)(nil).RemovePrivateEndpointTrustedOwner), arg0, arg1, arg2)
}

// RemoveUserFromRole mocks base method.
func (m *MockService) RemoveUserFromRole(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*client.GetAllRolesForUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromRole", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*client.GetAllRolesForUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveUserFromRole indicates an expected call of RemoveUserFromRole.
func (mr *MockServiceMockRecorder) RemoveUserFromRole(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromRole", reflect.TypeOf((*MockService)(nil).RemoveUserFromRole), arg0, arg1, arg2, arg3, arg4)
}

// SetAwsEndpointConnectionState mocks base method.
func (m *MockService) SetAwsEndpointConnectionState(arg0 context.Context, arg1, arg2 string, arg3 *client.SetAwsEndpointConnectionStateRequest) (*client.AwsEndpointConnection, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAwsEndpointConnectionState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*client.AwsEndpointConnection)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetAwsEndpointConnectionState indicates an expected call of SetAwsEndpointConnectionState.
func (mr *MockServiceMockRecorder) SetAwsEndpointConnectionState(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAwsEndpointConnectionState", reflect.TypeOf((*MockService)(nil).SetAwsEndpointConnectionState), arg0, arg1, arg2, arg3)
}

// SetClientCACert mocks base method.
func (m *MockService) SetClientCACert(arg0 context.Context, arg1 string, arg2 *client.SetClientCACertRequest) (*client.ClientCACertInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClientCACert", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ClientCACertInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetClientCACert indicates an expected call of SetClientCACert.
func (mr *MockServiceMockRecorder) SetClientCACert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientCACert", reflect.TypeOf((*MockService)(nil).SetClientCACert), arg0, arg1, arg2)
}

// SetClusterVersionDeferral mocks base method.
func (m *MockService) SetClusterVersionDeferral(arg0 context.Context, arg1 string, arg2 *client.ClusterVersionDeferral) (*client.ClusterVersionDeferral, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClusterVersionDeferral", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ClusterVersionDeferral)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetClusterVersionDeferral indicates an expected call of SetClusterVersionDeferral.
func (mr *MockServiceMockRecorder) SetClusterVersionDeferral(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterVersionDeferral", reflect.TypeOf((*MockService)(nil).SetClusterVersionDeferral), arg0, arg1, arg2)
}

// SetEgressTrafficPolicy mocks base method.
func (m *MockService) SetEgressTrafficPolicy(arg0 context.Context, arg1 string, arg2 *client.SetEgressTrafficPolicyRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEgressTrafficPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEgressTrafficPolicy indicates an expected call of SetEgressTrafficPolicy.
func (mr *MockServiceMockRecorder) SetEgressTrafficPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEgressTrafficPolicy", reflect.TypeOf((*MockService)(nil).SetEgressTrafficPolicy), arg0, arg1, arg2)
}

// SetMaintenanceWindow mocks base method.
func (m *MockService) SetMaintenanceWindow(arg0 context.Context, arg1 string, arg2 *client.MaintenanceWindow) (*client.MaintenanceWindow, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaintenanceWindow", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.MaintenanceWindow)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetMaintenanceWindow indicates an expected call of SetMaintenanceWindow.
func (mr *MockServiceMockRecorder) SetMaintenanceWindow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaintenanceWindow", reflect.TypeOf((*MockService)(nil).SetMaintenanceWindow), arg0, arg1, arg2)
}

// SetRolesForUser mocks base method.
func (m *MockService) SetRolesForUser(arg0 context.Context, arg1 string, arg2 *client.CockroachCloudSetRolesForUserRequest) (*client.GetAllRolesForUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRolesForUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.GetAllRolesForUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetRolesForUser indicates an expected call of SetRolesForUser.
func (mr *MockServiceMockRecorder) SetRolesForUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRolesForUser", reflect.TypeOf((*MockService)(nil).SetRolesForUser), arg0, arg1, arg2)
}

// UpdateAllowlistEntry mocks base method.
func (m *MockService) UpdateAllowlistEntry(arg0 context.Context, arg1, arg2 string, arg3 int32, arg4 *client.AllowlistEntry1) (*client.AllowlistEntry, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllowlistEntry", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*client.AllowlistEntry)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAllowlistEntry indicates an expected call of UpdateAllowlistEntry.
func (mr *MockServiceMockRecorder) UpdateAllowlistEntry(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllowlistEntry", reflect.TypeOf((*MockService)(nil).UpdateAllowlistEntry), arg0, arg1, arg2, arg3, arg4)
}

// UpdateApiOidcConfig mocks base method.
func (m *MockService) UpdateApiOidcConfig(arg0 context.Context, arg1 string, arg2 *client.ApiOidcConfig1) (*client.ApiOidcConfig, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiOidcConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ApiOidcConfig)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateApiOidcConfig indicates an expected call of UpdateApiOidcConfig.
func (mr *MockServiceMockRecorder) UpdateApiOidcConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiOidcConfig", reflect.TypeOf((*MockService)(nil).UpdateApiOidcConfig), arg0, arg1, arg2)
}

// UpdateCMEKSpec mocks base method.
func (m *MockService) UpdateCMEKSpec(arg0 context.Context, arg1 string, arg2 *client.CMEKClusterSpecification) (*client.CMEKClusterInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCMEKSpec", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.CMEKClusterInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCMEKSpec indicates an expected call of UpdateCMEKSpec.
func (mr *MockServiceMockRecorder) UpdateCMEKSpec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCMEKSpec", reflect.TypeOf((*MockService)(nil).UpdateCMEKSpec), arg0, arg1, arg2)
}

// UpdateCMEKStatus mocks base method.
func (m *MockService) UpdateCMEKStatus(arg0 context.Context, arg1 string, arg2 *client.UpdateCMEKStatusRequest) (*client.CMEKClusterInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCMEKStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.CMEKClusterInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCMEKStatus indicates an expected call of UpdateCMEKStatus.
func (mr *MockServiceMockRecorder) UpdateCMEKStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCMEKStatus", reflect.TypeOf((*MockService)(nil).UpdateCMEKStatus), arg0, arg1, arg2)
}

// UpdateClientCACert mocks base method.
func (m *MockService) UpdateClientCACert(arg0 context.Context, arg1 string, arg2 *client.UpdateClientCACertRequest) (*client.ClientCACertInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientCACert", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ClientCACertInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateClientCACert indicates an expected call of UpdateClientCACert.
func (mr *MockServiceMockRecorder) UpdateClientCACert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientCACert", reflect.TypeOf((*MockService)(nil).UpdateClientCACert), arg0, arg1, arg2)
}

// UpdateCluster mocks base method.
func (m *MockService) UpdateCluster(arg0 context.Context, arg1 string, arg2 *client.UpdateClusterSpecification) (*client.Cluster, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.Cluster)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockServiceMockRecorder) UpdateCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockService)(nil).UpdateCluster), arg0, arg1, arg2)
}

// UpdateFolder mocks base method.
func (m *MockService) UpdateFolder(arg0 context.Context, arg1 string, arg2 *client.UpdateFolderSpecification) (*client.FolderResource, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFolder", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.FolderResource)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFolder indicates an expected call of UpdateFolder.
func (mr *MockServiceMockRecorder) UpdateFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFolder", reflect.TypeOf((*MockService)(nil).UpdateFolder), arg0, arg1, arg2)
}

// UpdateGroup mocks base method.
func (m *MockService) UpdateGroup(arg0 context.Context, arg1 string, arg2 *client.UpdateGroupRequest) (*client.ScimGroup, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ScimGroup)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockServiceMockRecorder) UpdateGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockService)(nil).UpdateGroup), arg0, arg1, arg2)
}

// UpdateSQLUserPassword mocks base method.
func (m *MockService) UpdateSQLUserPassword(arg0 context.Context, arg1, arg2 string, arg3 *client.UpdateSQLUserPasswordRequest) (*client.SQLUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSQLUserPassword", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*client.SQLUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSQLUserPassword indicates an expected call of UpdateSQLUserPassword.
func (mr *MockServiceMockRecorder) UpdateSQLUserPassword(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSQLUserPassword", reflect.TypeOf((*MockService)(nil).UpdateSQLUserPassword), arg0, arg1, arg2, arg3)
}

// UpdateUser mocks base method.
func (m *MockService) UpdateUser(arg0 context.Context, arg1 string, arg2 *client.UpdateUserRequest) (*client.ScimUser, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ScimUser)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockServiceMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockService)(nil).UpdateUser), arg0, arg1, arg2)
}
