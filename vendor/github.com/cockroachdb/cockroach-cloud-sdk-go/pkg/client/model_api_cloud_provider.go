// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
	"fmt"
)

// ApiCloudProvider  - GCP: The Google Cloud Platform cloud provider.  - AWS: The Amazon Web Services cloud provider.
type ApiCloudProvider string

// List of api.CloudProvider.
const (
	APICLOUDPROVIDER_CLOUD_PROVIDER_UNSPECIFIED ApiCloudProvider = "CLOUD_PROVIDER_UNSPECIFIED"
	APICLOUDPROVIDER_GCP                        ApiCloudProvider = "GCP"
	APICLOUDPROVIDER_AWS                        ApiCloudProvider = "AWS"
)

// All allowed values of ApiCloudProvider enum.
var AllowedApiCloudProviderEnumValues = []ApiCloudProvider{
	"CLOUD_PROVIDER_UNSPECIFIED",
	"GCP",
	"AWS",
}

func (v *ApiCloudProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiCloudProvider(value)
	for _, existing := range AllowedApiCloudProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiCloudProvider", value)
}

// NewApiCloudProviderFromValue returns a pointer to a valid ApiCloudProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewApiCloudProviderFromValue(v string) (*ApiCloudProvider, error) {
	ev := ApiCloudProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiCloudProvider: valid values are %v", v, AllowedApiCloudProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v ApiCloudProvider) IsValid() bool {
	for _, existing := range AllowedApiCloudProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to api.CloudProvider value.
func (v ApiCloudProvider) Ptr() *ApiCloudProvider {
	return &v
}
