// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
)

// ClusterConfig struct for ClusterConfig.
type ClusterConfig struct {
	Dedicated            *DedicatedHardwareConfig `json:"dedicated,omitempty"`
	Serverless           *ServerlessClusterConfig `json:"serverless,omitempty"`
	AdditionalProperties map[string]interface{}
}

type clusterConfig ClusterConfig

// NewClusterConfig instantiates a new ClusterConfig object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterConfig() *ClusterConfig {
	p := ClusterConfig{}
	return &p
}

// GetDedicated returns the Dedicated field value if set, zero value otherwise.
func (o *ClusterConfig) GetDedicated() DedicatedHardwareConfig {
	if o == nil || o.Dedicated == nil {
		var ret DedicatedHardwareConfig
		return ret
	}
	return *o.Dedicated
}

// SetDedicated gets a reference to the given DedicatedHardwareConfig and assigns it to the Dedicated field.
func (o *ClusterConfig) SetDedicated(v DedicatedHardwareConfig) {
	o.Dedicated = &v
}

// GetServerless returns the Serverless field value if set, zero value otherwise.
func (o *ClusterConfig) GetServerless() ServerlessClusterConfig {
	if o == nil || o.Serverless == nil {
		var ret ServerlessClusterConfig
		return ret
	}
	return *o.Serverless
}

// SetServerless gets a reference to the given ServerlessClusterConfig and assigns it to the Serverless field.
func (o *ClusterConfig) SetServerless(v ServerlessClusterConfig) {
	o.Serverless = &v
}

func (o ClusterConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dedicated != nil {
		toSerialize["dedicated"] = o.Dedicated
	}
	if o.Serverless != nil {
		toSerialize["serverless"] = o.Serverless
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ClusterConfig) UnmarshalJSON(bytes []byte) (err error) {
	varClusterConfig := clusterConfig{}

	if err = json.Unmarshal(bytes, &varClusterConfig); err == nil {
		*o = ClusterConfig(varClusterConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "dedicated")
		delete(additionalProperties, "serverless")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
