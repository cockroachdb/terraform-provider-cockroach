// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
)

// CMEKClusterInfo CMEKClusterInfo contains the status of CMEK across an entire cluster, including within each one its regions..
type CMEKClusterInfo struct {
	Status               *CMEKStatus       `json:"status,omitempty"`
	RegionInfos          *[]CMEKRegionInfo `json:"region_infos,omitempty"`
	AdditionalProperties map[string]interface{}
}

type cMEKClusterInfo CMEKClusterInfo

// NewCMEKClusterInfo instantiates a new CMEKClusterInfo object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCMEKClusterInfo() *CMEKClusterInfo {
	p := CMEKClusterInfo{}
	var status CMEKStatus = CMEKSTATUS_UNKNOWN_STATUS
	p.Status = &status
	return &p
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CMEKClusterInfo) GetStatus() CMEKStatus {
	if o == nil || o.Status == nil {
		var ret CMEKStatus
		return ret
	}
	return *o.Status
}

// SetStatus gets a reference to the given CMEKStatus and assigns it to the Status field.
func (o *CMEKClusterInfo) SetStatus(v CMEKStatus) {
	o.Status = &v
}

// GetRegionInfos returns the RegionInfos field value if set, zero value otherwise.
func (o *CMEKClusterInfo) GetRegionInfos() []CMEKRegionInfo {
	if o == nil || o.RegionInfos == nil {
		var ret []CMEKRegionInfo
		return ret
	}
	return *o.RegionInfos
}

// SetRegionInfos gets a reference to the given []CMEKRegionInfo and assigns it to the RegionInfos field.
func (o *CMEKClusterInfo) SetRegionInfos(v []CMEKRegionInfo) {
	o.RegionInfos = &v
}

func (o CMEKClusterInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.RegionInfos != nil {
		toSerialize["region_infos"] = o.RegionInfos
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CMEKClusterInfo) UnmarshalJSON(bytes []byte) (err error) {
	varCMEKClusterInfo := cMEKClusterInfo{}

	if err = json.Unmarshal(bytes, &varCMEKClusterInfo); err == nil {
		*o = CMEKClusterInfo(varCMEKClusterInfo)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "region_infos")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
