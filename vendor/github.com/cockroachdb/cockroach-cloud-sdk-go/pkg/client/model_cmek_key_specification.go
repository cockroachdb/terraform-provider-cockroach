// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
)

// CMEKKeySpecification CMEKKeySpecification contains all the details necessary to use a customer-provided encryption key. This involves the type/location of the key and the principal to authenticate as when accessing it..
type CMEKKeySpecification struct {
	Type                 *CMEKKeyType `json:"type,omitempty"`
	Uri                  *string      `json:"uri,omitempty"`
	AuthPrincipal        *string      `json:"auth_principal,omitempty"`
	AdditionalProperties map[string]interface{}
}

type cMEKKeySpecification CMEKKeySpecification

// NewCMEKKeySpecification instantiates a new CMEKKeySpecification object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCMEKKeySpecification() *CMEKKeySpecification {
	p := CMEKKeySpecification{}
	var type_ CMEKKeyType = CMEKKEYTYPE_UNKNOWN_KEY_TYPE
	p.Type = &type_
	return &p
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CMEKKeySpecification) GetType() CMEKKeyType {
	if o == nil || o.Type == nil {
		var ret CMEKKeyType
		return ret
	}
	return *o.Type
}

// SetType gets a reference to the given CMEKKeyType and assigns it to the Type field.
func (o *CMEKKeySpecification) SetType(v CMEKKeyType) {
	o.Type = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *CMEKKeySpecification) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *CMEKKeySpecification) SetUri(v string) {
	o.Uri = &v
}

// GetAuthPrincipal returns the AuthPrincipal field value if set, zero value otherwise.
func (o *CMEKKeySpecification) GetAuthPrincipal() string {
	if o == nil || o.AuthPrincipal == nil {
		var ret string
		return ret
	}
	return *o.AuthPrincipal
}

// SetAuthPrincipal gets a reference to the given string and assigns it to the AuthPrincipal field.
func (o *CMEKKeySpecification) SetAuthPrincipal(v string) {
	o.AuthPrincipal = &v
}

func (o CMEKKeySpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	if o.AuthPrincipal != nil {
		toSerialize["auth_principal"] = o.AuthPrincipal
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CMEKKeySpecification) UnmarshalJSON(bytes []byte) (err error) {
	varCMEKKeySpecification := cMEKKeySpecification{}

	if err = json.Unmarshal(bytes, &varCMEKKeySpecification); err == nil {
		*o = CMEKKeySpecification(varCMEKKeySpecification)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "uri")
		delete(additionalProperties, "auth_principal")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
