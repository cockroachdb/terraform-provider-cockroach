// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
)

// CMEKRegionInfo CMEKRegionInfo contains the status of CMEK within a region. This includes current and past key specifications used within the region, as well as the status of those specifications..
type CMEKRegionInfo struct {
	Region               *string        `json:"region,omitempty"`
	KeyInfos             *[]CMEKKeyInfo `json:"key_infos,omitempty"`
	AdditionalProperties map[string]interface{}
}

type cMEKRegionInfo CMEKRegionInfo

// NewCMEKRegionInfo instantiates a new CMEKRegionInfo object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCMEKRegionInfo() *CMEKRegionInfo {
	p := CMEKRegionInfo{}
	return &p
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CMEKRegionInfo) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CMEKRegionInfo) SetRegion(v string) {
	o.Region = &v
}

// GetKeyInfos returns the KeyInfos field value if set, zero value otherwise.
func (o *CMEKRegionInfo) GetKeyInfos() []CMEKKeyInfo {
	if o == nil || o.KeyInfos == nil {
		var ret []CMEKKeyInfo
		return ret
	}
	return *o.KeyInfos
}

// SetKeyInfos gets a reference to the given []CMEKKeyInfo and assigns it to the KeyInfos field.
func (o *CMEKRegionInfo) SetKeyInfos(v []CMEKKeyInfo) {
	o.KeyInfos = &v
}

func (o CMEKRegionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.KeyInfos != nil {
		toSerialize["key_infos"] = o.KeyInfos
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CMEKRegionInfo) UnmarshalJSON(bytes []byte) (err error) {
	varCMEKRegionInfo := cMEKRegionInfo{}

	if err = json.Unmarshal(bytes, &varCMEKRegionInfo); err == nil {
		*o = CMEKRegionInfo(varCMEKRegionInfo)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "region")
		delete(additionalProperties, "key_infos")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
