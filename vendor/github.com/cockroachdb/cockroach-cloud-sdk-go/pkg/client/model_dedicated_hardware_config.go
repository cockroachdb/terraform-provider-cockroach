// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
)

// DedicatedHardwareConfig struct for DedicatedHardwareConfig.
type DedicatedHardwareConfig struct {
	// MachineType is the machine type identifier within the given cloud provider, ex. m5.xlarge, n2-standard-4.
	MachineType string `json:"machine_type"`
	// NumVirtualCPUs is the number of virtual CPUs per node in the cluster.
	NumVirtualCpus int32 `json:"num_virtual_cpus"`
	// StorageGiB is the number of storage GiB per node in the cluster.
	StorageGib int32 `json:"storage_gib"`
	// MemoryGiB is the memory GiB per node in the cluster.
	MemoryGib float32 `json:"memory_gib"`
	// DiskIOPs is the number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default.
	DiskIops             int32 `json:"disk_iops"`
	AdditionalProperties map[string]interface{}
}

type dedicatedHardwareConfig DedicatedHardwareConfig

// NewDedicatedHardwareConfig instantiates a new DedicatedHardwareConfig object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedHardwareConfig(machineType string, numVirtualCpus int32, storageGib int32, memoryGib float32, diskIops int32) *DedicatedHardwareConfig {
	p := DedicatedHardwareConfig{}
	p.MachineType = machineType
	p.NumVirtualCpus = numVirtualCpus
	p.StorageGib = storageGib
	p.MemoryGib = memoryGib
	p.DiskIops = diskIops
	return &p
}

// NewDedicatedHardwareConfigWithDefaults instantiates a new DedicatedHardwareConfig object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedHardwareConfigWithDefaults() *DedicatedHardwareConfig {
	p := DedicatedHardwareConfig{}
	return &p
}

// GetMachineType returns the MachineType field value.
func (o *DedicatedHardwareConfig) GetMachineType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MachineType
}

// SetMachineType sets field value.
func (o *DedicatedHardwareConfig) SetMachineType(v string) {
	o.MachineType = v
}

// GetNumVirtualCpus returns the NumVirtualCpus field value.
func (o *DedicatedHardwareConfig) GetNumVirtualCpus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumVirtualCpus
}

// SetNumVirtualCpus sets field value.
func (o *DedicatedHardwareConfig) SetNumVirtualCpus(v int32) {
	o.NumVirtualCpus = v
}

// GetStorageGib returns the StorageGib field value.
func (o *DedicatedHardwareConfig) GetStorageGib() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StorageGib
}

// SetStorageGib sets field value.
func (o *DedicatedHardwareConfig) SetStorageGib(v int32) {
	o.StorageGib = v
}

// GetMemoryGib returns the MemoryGib field value.
func (o *DedicatedHardwareConfig) GetMemoryGib() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MemoryGib
}

// SetMemoryGib sets field value.
func (o *DedicatedHardwareConfig) SetMemoryGib(v float32) {
	o.MemoryGib = v
}

// GetDiskIops returns the DiskIops field value.
func (o *DedicatedHardwareConfig) GetDiskIops() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskIops
}

// SetDiskIops sets field value.
func (o *DedicatedHardwareConfig) SetDiskIops(v int32) {
	o.DiskIops = v
}

func (o DedicatedHardwareConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["machine_type"] = o.MachineType
	}
	if true {
		toSerialize["num_virtual_cpus"] = o.NumVirtualCpus
	}
	if true {
		toSerialize["storage_gib"] = o.StorageGib
	}
	if true {
		toSerialize["memory_gib"] = o.MemoryGib
	}
	if true {
		toSerialize["disk_iops"] = o.DiskIops
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DedicatedHardwareConfig) UnmarshalJSON(bytes []byte) (err error) {
	varDedicatedHardwareConfig := dedicatedHardwareConfig{}

	if err = json.Unmarshal(bytes, &varDedicatedHardwareConfig); err == nil {
		*o = DedicatedHardwareConfig(varDedicatedHardwareConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "machine_type")
		delete(additionalProperties, "num_virtual_cpus")
		delete(additionalProperties, "storage_gib")
		delete(additionalProperties, "memory_gib")
		delete(additionalProperties, "disk_iops")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
