// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
)

// DedicatedHardwareUpdateSpecification struct for DedicatedHardwareUpdateSpecification.
type DedicatedHardwareUpdateSpecification struct {
	MachineSpec *DedicatedMachineTypeSpecification `json:"machine_spec,omitempty"`
	// StorageGiB is the number of storage GiB per node in the cluster.
	StorageGib *int32 `json:"storage_gib,omitempty"`
	// DiskIOPs is the number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default. Only available for AWS clusters.
	DiskIops             *int32 `json:"disk_iops,omitempty"`
	AdditionalProperties map[string]interface{}
}

type dedicatedHardwareUpdateSpecification DedicatedHardwareUpdateSpecification

// NewDedicatedHardwareUpdateSpecification instantiates a new DedicatedHardwareUpdateSpecification object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedHardwareUpdateSpecification() *DedicatedHardwareUpdateSpecification {
	p := DedicatedHardwareUpdateSpecification{}
	return &p
}

// GetMachineSpec returns the MachineSpec field value if set, zero value otherwise.
func (o *DedicatedHardwareUpdateSpecification) GetMachineSpec() DedicatedMachineTypeSpecification {
	if o == nil || o.MachineSpec == nil {
		var ret DedicatedMachineTypeSpecification
		return ret
	}
	return *o.MachineSpec
}

// SetMachineSpec gets a reference to the given DedicatedMachineTypeSpecification and assigns it to the MachineSpec field.
func (o *DedicatedHardwareUpdateSpecification) SetMachineSpec(v DedicatedMachineTypeSpecification) {
	o.MachineSpec = &v
}

// GetStorageGib returns the StorageGib field value if set, zero value otherwise.
func (o *DedicatedHardwareUpdateSpecification) GetStorageGib() int32 {
	if o == nil || o.StorageGib == nil {
		var ret int32
		return ret
	}
	return *o.StorageGib
}

// SetStorageGib gets a reference to the given int32 and assigns it to the StorageGib field.
func (o *DedicatedHardwareUpdateSpecification) SetStorageGib(v int32) {
	o.StorageGib = &v
}

// GetDiskIops returns the DiskIops field value if set, zero value otherwise.
func (o *DedicatedHardwareUpdateSpecification) GetDiskIops() int32 {
	if o == nil || o.DiskIops == nil {
		var ret int32
		return ret
	}
	return *o.DiskIops
}

// SetDiskIops gets a reference to the given int32 and assigns it to the DiskIops field.
func (o *DedicatedHardwareUpdateSpecification) SetDiskIops(v int32) {
	o.DiskIops = &v
}

func (o DedicatedHardwareUpdateSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MachineSpec != nil {
		toSerialize["machine_spec"] = o.MachineSpec
	}
	if o.StorageGib != nil {
		toSerialize["storage_gib"] = o.StorageGib
	}
	if o.DiskIops != nil {
		toSerialize["disk_iops"] = o.DiskIops
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DedicatedHardwareUpdateSpecification) UnmarshalJSON(bytes []byte) (err error) {
	varDedicatedHardwareUpdateSpecification := dedicatedHardwareUpdateSpecification{}

	if err = json.Unmarshal(bytes, &varDedicatedHardwareUpdateSpecification); err == nil {
		*o = DedicatedHardwareUpdateSpecification(varDedicatedHardwareUpdateSpecification)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "machine_spec")
		delete(additionalProperties, "storage_gib")
		delete(additionalProperties, "disk_iops")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
