// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
	"time"
)

// KeysetPaginationRequest struct for KeysetPaginationRequest.
type KeysetPaginationRequest struct {
	StartKey             *string        `json:"start_key,omitempty"`
	Direction            *PageDirection `json:"direction,omitempty"`
	Limit                *int32         `json:"limit,omitempty"`
	Time                 *time.Time     `json:"time,omitempty"`
	Order                *SortOrder     `json:"order,omitempty"`
	AdditionalProperties map[string]interface{}
}

type keysetPaginationRequest KeysetPaginationRequest

// NewKeysetPaginationRequest instantiates a new KeysetPaginationRequest object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeysetPaginationRequest() *KeysetPaginationRequest {
	p := KeysetPaginationRequest{}
	var direction PageDirection = PAGEDIRECTION_NEXT
	p.Direction = &direction
	var order SortOrder = SORTORDER_ASC
	p.Order = &order
	return &p
}

// GetStartKey returns the StartKey field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetStartKey() string {
	if o == nil || o.StartKey == nil {
		var ret string
		return ret
	}
	return *o.StartKey
}

// SetStartKey gets a reference to the given string and assigns it to the StartKey field.
func (o *KeysetPaginationRequest) SetStartKey(v string) {
	o.StartKey = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetDirection() PageDirection {
	if o == nil || o.Direction == nil {
		var ret PageDirection
		return ret
	}
	return *o.Direction
}

// SetDirection gets a reference to the given PageDirection and assigns it to the Direction field.
func (o *KeysetPaginationRequest) SetDirection(v PageDirection) {
	o.Direction = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *KeysetPaginationRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetTime() time.Time {
	if o == nil || o.Time == nil {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *KeysetPaginationRequest) SetTime(v time.Time) {
	o.Time = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetOrder() SortOrder {
	if o == nil || o.Order == nil {
		var ret SortOrder
		return ret
	}
	return *o.Order
}

// SetOrder gets a reference to the given SortOrder and assigns it to the Order field.
func (o *KeysetPaginationRequest) SetOrder(v SortOrder) {
	o.Order = &v
}

func (o KeysetPaginationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartKey != nil {
		toSerialize["start_key"] = o.StartKey
	}
	if o.Direction != nil {
		toSerialize["direction"] = o.Direction
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *KeysetPaginationRequest) UnmarshalJSON(bytes []byte) (err error) {
	varKeysetPaginationRequest := keysetPaginationRequest{}

	if err = json.Unmarshal(bytes, &varKeysetPaginationRequest); err == nil {
		*o = KeysetPaginationRequest(varKeysetPaginationRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "start_key")
		delete(additionalProperties, "direction")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "time")
		delete(additionalProperties, "order")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
