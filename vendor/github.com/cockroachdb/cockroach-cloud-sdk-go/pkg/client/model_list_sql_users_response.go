// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
)

// ListSQLUsersResponse struct for ListSQLUsersResponse.
type ListSQLUsersResponse struct {
	Users                []SQLUser                 `json:"users"`
	Pagination           *KeysetPaginationResponse `json:"pagination,omitempty"`
	AdditionalProperties map[string]interface{}
}

type listSQLUsersResponse ListSQLUsersResponse

// NewListSQLUsersResponse instantiates a new ListSQLUsersResponse object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSQLUsersResponse(users []SQLUser) *ListSQLUsersResponse {
	p := ListSQLUsersResponse{}
	p.Users = users
	return &p
}

// NewListSQLUsersResponseWithDefaults instantiates a new ListSQLUsersResponse object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSQLUsersResponseWithDefaults() *ListSQLUsersResponse {
	p := ListSQLUsersResponse{}
	return &p
}

// GetUsers returns the Users field value.
func (o *ListSQLUsersResponse) GetUsers() []SQLUser {
	if o == nil {
		var ret []SQLUser
		return ret
	}

	return o.Users
}

// SetUsers sets field value.
func (o *ListSQLUsersResponse) SetUsers(v []SQLUser) {
	o.Users = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ListSQLUsersResponse) GetPagination() KeysetPaginationResponse {
	if o == nil || o.Pagination == nil {
		var ret KeysetPaginationResponse
		return ret
	}
	return *o.Pagination
}

// SetPagination gets a reference to the given KeysetPaginationResponse and assigns it to the Pagination field.
func (o *ListSQLUsersResponse) SetPagination(v KeysetPaginationResponse) {
	o.Pagination = &v
}

func (o ListSQLUsersResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["users"] = o.Users
	}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ListSQLUsersResponse) UnmarshalJSON(bytes []byte) (err error) {
	varListSQLUsersResponse := listSQLUsersResponse{}

	if err = json.Unmarshal(bytes, &varListSQLUsersResponse); err == nil {
		*o = ListSQLUsersResponse(varListSQLUsersResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "users")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
