// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
)

// Node struct for Node.
type Node struct {
	Name                 string     `json:"name"`
	RegionName           string     `json:"region_name"`
	Status               NodeStatus `json:"status"`
	AdditionalProperties map[string]interface{}
}

type node Node

// NewNode instantiates a new Node object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode(name string, regionName string, status NodeStatus) *Node {
	p := Node{}
	p.Name = name
	p.RegionName = regionName
	p.Status = status
	return &p
}

// NewNodeWithDefaults instantiates a new Node object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	p := Node{}
	var status NodeStatus = NODESTATUS_NODE_STATUS_UNSPECIFIED
	p.Status = status
	return &p
}

// GetName returns the Name field value.
func (o *Node) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value.
func (o *Node) SetName(v string) {
	o.Name = v
}

// GetRegionName returns the RegionName field value.
func (o *Node) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// SetRegionName sets field value.
func (o *Node) SetRegionName(v string) {
	o.RegionName = v
}

// GetStatus returns the Status field value.
func (o *Node) GetStatus() NodeStatus {
	if o == nil {
		var ret NodeStatus
		return ret
	}

	return o.Status
}

// SetStatus sets field value.
func (o *Node) SetStatus(v NodeStatus) {
	o.Status = v
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["region_name"] = o.RegionName
	}
	if true {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Node) UnmarshalJSON(bytes []byte) (err error) {
	varNode := node{}

	if err = json.Unmarshal(bytes, &varNode); err == nil {
		*o = Node(varNode)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "region_name")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
