// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-09-20

package client

import (
	"encoding/json"
	"fmt"
)

// OrganizationUserRole the model 'OrganizationUserRole'.
type OrganizationUserRole string

// List of OrganizationUserRole.
const (
	ORGANIZATIONUSERROLE_DEVELOPER               OrganizationUserRole = "ORG_ROLE_DEVELOPER"
	ORGANIZATIONUSERROLE_ADMIN                   OrganizationUserRole = "ORG_ROLE_ADMIN"
	ORGANIZATIONUSERROLE_BILLING_COORDINATOR     OrganizationUserRole = "ORG_ROLE_BILLING_COORDINATOR"
	ORGANIZATIONUSERROLE_ORG_ADMIN               OrganizationUserRole = "ORG_ROLE_ORG_ADMIN"
	ORGANIZATIONUSERROLE_ORG_MEMBER              OrganizationUserRole = "ORG_ROLE_ORG_MEMBER"
	ORGANIZATIONUSERROLE_CLUSTER_ADMIN           OrganizationUserRole = "ORG_ROLE_CLUSTER_ADMIN"
	ORGANIZATIONUSERROLE_CLUSTER_OPERATOR_WRITER OrganizationUserRole = "ORG_ROLE_CLUSTER_OPERATOR_WRITER"
	ORGANIZATIONUSERROLE_CLUSTER_OPERATOR_READER OrganizationUserRole = "ORG_ROLE_CLUSTER_OPERATOR_READER"
	ORGANIZATIONUSERROLE_CLUSTER_DEVELOPER       OrganizationUserRole = "ORG_ROLE_CLUSTER_DEVELOPER"
	ORGANIZATIONUSERROLE_CLUSTER_CREATOR         OrganizationUserRole = "ORG_ROLE_CLUSTER_CREATOR"
)

// All allowed values of OrganizationUserRole enum.
var AllowedOrganizationUserRoleEnumValues = []OrganizationUserRole{
	"ORG_ROLE_DEVELOPER",
	"ORG_ROLE_ADMIN",
	"ORG_ROLE_BILLING_COORDINATOR",
	"ORG_ROLE_ORG_ADMIN",
	"ORG_ROLE_ORG_MEMBER",
	"ORG_ROLE_CLUSTER_ADMIN",
	"ORG_ROLE_CLUSTER_OPERATOR_WRITER",
	"ORG_ROLE_CLUSTER_OPERATOR_READER",
	"ORG_ROLE_CLUSTER_DEVELOPER",
	"ORG_ROLE_CLUSTER_CREATOR",
}

func (v *OrganizationUserRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationUserRole(value)
	for _, existing := range AllowedOrganizationUserRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationUserRole", value)
}

// NewOrganizationUserRoleFromValue returns a pointer to a valid OrganizationUserRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewOrganizationUserRoleFromValue(v string) (*OrganizationUserRole, error) {
	ev := OrganizationUserRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationUserRole: valid values are %v", v, AllowedOrganizationUserRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v OrganizationUserRole) IsValid() bool {
	for _, existing := range AllowedOrganizationUserRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationUserRole value.
func (v OrganizationUserRole) Ptr() *OrganizationUserRole {
	return &v
}
