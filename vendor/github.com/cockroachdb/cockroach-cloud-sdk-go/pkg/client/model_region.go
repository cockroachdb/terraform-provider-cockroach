// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-03-31

package client

import (
	"encoding/json"
)

// Region struct for Region.
type Region struct {
	Name   string `json:"name"`
	SqlDns string `json:"sql_dns"`
	UiDns  string `json:"ui_dns"`
	// NodeCount will be 0 for serverless clusters.
	NodeCount            int32 `json:"node_count"`
	AdditionalProperties map[string]interface{}
}

type region Region

// NewRegion instantiates a new Region object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegion(name string, sqlDns string, uiDns string, nodeCount int32) *Region {
	p := Region{}
	p.Name = name
	p.SqlDns = sqlDns
	p.UiDns = uiDns
	p.NodeCount = nodeCount
	return &p
}

// NewRegionWithDefaults instantiates a new Region object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionWithDefaults() *Region {
	p := Region{}
	return &p
}

// GetName returns the Name field value.
func (o *Region) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value.
func (o *Region) SetName(v string) {
	o.Name = v
}

// GetSqlDns returns the SqlDns field value.
func (o *Region) GetSqlDns() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SqlDns
}

// SetSqlDns sets field value.
func (o *Region) SetSqlDns(v string) {
	o.SqlDns = v
}

// GetUiDns returns the UiDns field value.
func (o *Region) GetUiDns() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UiDns
}

// SetUiDns sets field value.
func (o *Region) SetUiDns(v string) {
	o.UiDns = v
}

// GetNodeCount returns the NodeCount field value.
func (o *Region) GetNodeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeCount
}

// SetNodeCount sets field value.
func (o *Region) SetNodeCount(v int32) {
	o.NodeCount = v
}

func (o Region) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["sql_dns"] = o.SqlDns
	}
	if true {
		toSerialize["ui_dns"] = o.UiDns
	}
	if true {
		toSerialize["node_count"] = o.NodeCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Region) UnmarshalJSON(bytes []byte) (err error) {
	varRegion := region{}

	if err = json.Unmarshal(bytes, &varRegion); err == nil {
		*o = Region(varRegion)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "sql_dns")
		delete(additionalProperties, "ui_dns")
		delete(additionalProperties, "node_count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}
