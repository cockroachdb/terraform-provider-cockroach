// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2022-09-20

package client

import (
	"encoding/json"
)

// SetEgressTrafficPolicyRequest SetEgressTrafficPolicyRequest is the input for the SetEgressTrafficPolicy RPC..
type SetEgressTrafficPolicyRequest struct {
	// allow_all, if true results in unrestricted egress traffic. If false, egress traffic is set to default-deny and is managed via the Egress Rule Management API.
	AllowAll bool `json:"allow_all"`
	// idempotency_key uniquely identifies this request. If not set, it will be set by the server.
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
}

// NewSetEgressTrafficPolicyRequest instantiates a new SetEgressTrafficPolicyRequest object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetEgressTrafficPolicyRequest(allowAll bool) *SetEgressTrafficPolicyRequest {
	p := SetEgressTrafficPolicyRequest{}
	p.AllowAll = allowAll
	return &p
}

// NewSetEgressTrafficPolicyRequestWithDefaults instantiates a new SetEgressTrafficPolicyRequest object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetEgressTrafficPolicyRequestWithDefaults() *SetEgressTrafficPolicyRequest {
	p := SetEgressTrafficPolicyRequest{}
	return &p
}

// GetAllowAll returns the AllowAll field value.
func (o *SetEgressTrafficPolicyRequest) GetAllowAll() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowAll
}

// SetAllowAll sets field value.
func (o *SetEgressTrafficPolicyRequest) SetAllowAll(v bool) {
	o.AllowAll = v
}

// GetIdempotencyKey returns the IdempotencyKey field value if set, zero value otherwise.
func (o *SetEgressTrafficPolicyRequest) GetIdempotencyKey() string {
	if o == nil || o.IdempotencyKey == nil {
		var ret string
		return ret
	}
	return *o.IdempotencyKey
}

// SetIdempotencyKey gets a reference to the given string and assigns it to the IdempotencyKey field.
func (o *SetEgressTrafficPolicyRequest) SetIdempotencyKey(v string) {
	o.IdempotencyKey = &v
}

func (o SetEgressTrafficPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["allow_all"] = o.AllowAll
	}
	if o.IdempotencyKey != nil {
		toSerialize["idempotency_key"] = o.IdempotencyKey
	}
	return json.Marshal(toSerialize)
}
