// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2023-04-10

package client

// UpdateClusterSpecification Set `upgrade_status` to 'UPGRADE_RUNNING' to start an upgrade. Multi-node clusters will undergo a rolling upgrade and will remain available, but single-node clusters will be briefly unavailable while the upgrade takes place. Upgrades will be finalized automatically after 72 hours, or can be manually finalized by setting the value to 'FINALIZED'. Before the cluster is finalized, it can be rolled back by setting the value to 'ROLLBACK_RUNNING'. Version upgrade operations cannot be performed simultaneously with other update operations..
type UpdateClusterSpecification struct {
	Dedicated *DedicatedClusterUpdateSpecification `json:"dedicated,omitempty"`
	// Limited Access: The parent ID is a folder ID. An empty string or \"root\" represents the root level.
	ParentId      *string                               `json:"parent_id,omitempty"`
	Serverless    *ServerlessClusterUpdateSpecification `json:"serverless,omitempty"`
	UpgradeStatus *ClusterUpgradeStatusType             `json:"upgrade_status,omitempty"`
}

// NewUpdateClusterSpecification instantiates a new UpdateClusterSpecification object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateClusterSpecification() *UpdateClusterSpecification {
	p := UpdateClusterSpecification{}
	return &p
}

// GetDedicated returns the Dedicated field value if set, zero value otherwise.
func (o *UpdateClusterSpecification) GetDedicated() DedicatedClusterUpdateSpecification {
	if o == nil || o.Dedicated == nil {
		var ret DedicatedClusterUpdateSpecification
		return ret
	}
	return *o.Dedicated
}

// SetDedicated gets a reference to the given DedicatedClusterUpdateSpecification and assigns it to the Dedicated field.
func (o *UpdateClusterSpecification) SetDedicated(v DedicatedClusterUpdateSpecification) {
	o.Dedicated = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *UpdateClusterSpecification) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *UpdateClusterSpecification) SetParentId(v string) {
	o.ParentId = &v
}

// GetServerless returns the Serverless field value if set, zero value otherwise.
func (o *UpdateClusterSpecification) GetServerless() ServerlessClusterUpdateSpecification {
	if o == nil || o.Serverless == nil {
		var ret ServerlessClusterUpdateSpecification
		return ret
	}
	return *o.Serverless
}

// SetServerless gets a reference to the given ServerlessClusterUpdateSpecification and assigns it to the Serverless field.
func (o *UpdateClusterSpecification) SetServerless(v ServerlessClusterUpdateSpecification) {
	o.Serverless = &v
}

// GetUpgradeStatus returns the UpgradeStatus field value if set, zero value otherwise.
func (o *UpdateClusterSpecification) GetUpgradeStatus() ClusterUpgradeStatusType {
	if o == nil || o.UpgradeStatus == nil {
		var ret ClusterUpgradeStatusType
		return ret
	}
	return *o.UpgradeStatus
}

// SetUpgradeStatus gets a reference to the given ClusterUpgradeStatusType and assigns it to the UpgradeStatus field.
func (o *UpdateClusterSpecification) SetUpgradeStatus(v ClusterUpgradeStatusType) {
	o.UpgradeStatus = &v
}
