// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2023-04-10

package client

import (
	"fmt"
)

// ClientCACertStatus  - NOT_SET: NOT_SET indicates a client CA cert is not set on the cluster. New clusters won't have a client CA cert set.  - IS_SET: IS_SET indicates a client CA cert is set on the cluster.  - PENDING: PENDING indicates a client CA cert update is in flight on the cluster.  - FAILED: FAILED indicates a client CA cert update was attempted, but failed.
type ClientCACertStatus string

// List of ClientCACertStatus.
const (
	CLIENTCACERTSTATUS_NOT_SET ClientCACertStatus = "NOT_SET"
	CLIENTCACERTSTATUS_IS_SET  ClientCACertStatus = "IS_SET"
	CLIENTCACERTSTATUS_PENDING ClientCACertStatus = "PENDING"
	CLIENTCACERTSTATUS_FAILED  ClientCACertStatus = "FAILED"
)

// All allowed values of ClientCACertStatus enum.
var AllowedClientCACertStatusEnumValues = []ClientCACertStatus{
	"NOT_SET",
	"IS_SET",
	"PENDING",
	"FAILED",
}

// NewClientCACertStatusFromValue returns a pointer to a valid ClientCACertStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewClientCACertStatusFromValue(v string) (*ClientCACertStatus, error) {
	ev := ClientCACertStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientCACertStatus: valid values are %v", v, AllowedClientCACertStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v ClientCACertStatus) IsValid() bool {
	for _, existing := range AllowedClientCACertStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClientCACertStatus value.
func (v ClientCACertStatus) Ptr() *ClientCACertStatus {
	return &v
}
