// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2023-04-10

package client

import (
	"time"
)

// EgressRule EgressRule represents a network egress rule..
type EgressRule struct {
	// cluster_id identifies the cluster to which this egress rule applies.
	ClusterId string `json:"cluster_id"`
	// created_at is the time at which the time at which the egress rule was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// crl_managed indicates this egress rule is managed by CockroachDB Cloud services. This field is set by the server.
	CrlManaged bool `json:"crl_managed"`
	// description is a longer that serves to document the rules purpose.
	Description string `json:"description"`
	// destination is the endpoint (or subnetwork if CIDR) to which traffic is allowed.
	Destination string `json:"destination"`
	// id uniquely identifies this egress rule.
	Id string `json:"id"`
	// name is the name of the egress rule.
	Name string `json:"name"`
	// Deprecated: This field is ignored and will be removed in the next version. paths are the allowed URL paths. Only valid if Type=\"FQDN\".
	Paths *[]string `json:"paths,omitempty"`
	// ports are the allowed ports for TCP protocol. If Empty, all ports are allowed.
	Ports *[]int32 `json:"ports,omitempty"`
	// state indicates the state of the egress rule.
	State string `json:"state"`
	// type classifies the destination field. Valid types include: \"FQDN\", \"CIDR\".
	Type string `json:"type"`
}

// NewEgressRule instantiates a new EgressRule object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEgressRule(clusterId string, crlManaged bool, description string, destination string, id string, name string, state string, type_ string) *EgressRule {
	p := EgressRule{}
	p.ClusterId = clusterId
	p.CrlManaged = crlManaged
	p.Description = description
	p.Destination = destination
	p.Id = id
	p.Name = name
	p.State = state
	p.Type = type_
	return &p
}

// NewEgressRuleWithDefaults instantiates a new EgressRule object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEgressRuleWithDefaults() *EgressRule {
	p := EgressRule{}
	return &p
}

// GetClusterId returns the ClusterId field value.
func (o *EgressRule) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// SetClusterId sets field value.
func (o *EgressRule) SetClusterId(v string) {
	o.ClusterId = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EgressRule) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *EgressRule) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCrlManaged returns the CrlManaged field value.
func (o *EgressRule) GetCrlManaged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CrlManaged
}

// SetCrlManaged sets field value.
func (o *EgressRule) SetCrlManaged(v bool) {
	o.CrlManaged = v
}

// GetDescription returns the Description field value.
func (o *EgressRule) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// SetDescription sets field value.
func (o *EgressRule) SetDescription(v string) {
	o.Description = v
}

// GetDestination returns the Destination field value.
func (o *EgressRule) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// SetDestination sets field value.
func (o *EgressRule) SetDestination(v string) {
	o.Destination = v
}

// GetId returns the Id field value.
func (o *EgressRule) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// SetId sets field value.
func (o *EgressRule) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value.
func (o *EgressRule) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value.
func (o *EgressRule) SetName(v string) {
	o.Name = v
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *EgressRule) GetPaths() []string {
	if o == nil || o.Paths == nil {
		var ret []string
		return ret
	}
	return *o.Paths
}

// SetPaths gets a reference to the given []string and assigns it to the Paths field.
func (o *EgressRule) SetPaths(v []string) {
	o.Paths = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *EgressRule) GetPorts() []int32 {
	if o == nil || o.Ports == nil {
		var ret []int32
		return ret
	}
	return *o.Ports
}

// SetPorts gets a reference to the given []int32 and assigns it to the Ports field.
func (o *EgressRule) SetPorts(v []int32) {
	o.Ports = &v
}

// GetState returns the State field value.
func (o *EgressRule) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// SetState sets field value.
func (o *EgressRule) SetState(v string) {
	o.State = v
}

// GetType returns the Type field value.
func (o *EgressRule) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// SetType sets field value.
func (o *EgressRule) SetType(v string) {
	o.Type = v
}
