// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2023-04-10

package client

// ScimSchemaAttribute struct for ScimSchemaAttribute.
type ScimSchemaAttribute struct {
	CanonicalValues *[]string              `json:"canonicalValues,omitempty"`
	CaseExact       *bool                  `json:"caseExact,omitempty"`
	Description     *string                `json:"description,omitempty"`
	MultiValued     *bool                  `json:"multiValued,omitempty"`
	Mutability      *string                `json:"mutability,omitempty"`
	Name            *string                `json:"name,omitempty"`
	ReferenceTypes  *[]string              `json:"referenceTypes,omitempty"`
	Required        *bool                  `json:"required,omitempty"`
	Returned        *string                `json:"returned,omitempty"`
	SubAttributes   *[]ScimSchemaAttribute `json:"subAttributes,omitempty"`
	Type            *string                `json:"type,omitempty"`
	Uniqueness      *string                `json:"uniqueness,omitempty"`
}

// NewScimSchemaAttribute instantiates a new ScimSchemaAttribute object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimSchemaAttribute() *ScimSchemaAttribute {
	p := ScimSchemaAttribute{}
	return &p
}

// GetCanonicalValues returns the CanonicalValues field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetCanonicalValues() []string {
	if o == nil || o.CanonicalValues == nil {
		var ret []string
		return ret
	}
	return *o.CanonicalValues
}

// SetCanonicalValues gets a reference to the given []string and assigns it to the CanonicalValues field.
func (o *ScimSchemaAttribute) SetCanonicalValues(v []string) {
	o.CanonicalValues = &v
}

// GetCaseExact returns the CaseExact field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetCaseExact() bool {
	if o == nil || o.CaseExact == nil {
		var ret bool
		return ret
	}
	return *o.CaseExact
}

// SetCaseExact gets a reference to the given bool and assigns it to the CaseExact field.
func (o *ScimSchemaAttribute) SetCaseExact(v bool) {
	o.CaseExact = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ScimSchemaAttribute) SetDescription(v string) {
	o.Description = &v
}

// GetMultiValued returns the MultiValued field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetMultiValued() bool {
	if o == nil || o.MultiValued == nil {
		var ret bool
		return ret
	}
	return *o.MultiValued
}

// SetMultiValued gets a reference to the given bool and assigns it to the MultiValued field.
func (o *ScimSchemaAttribute) SetMultiValued(v bool) {
	o.MultiValued = &v
}

// GetMutability returns the Mutability field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetMutability() string {
	if o == nil || o.Mutability == nil {
		var ret string
		return ret
	}
	return *o.Mutability
}

// SetMutability gets a reference to the given string and assigns it to the Mutability field.
func (o *ScimSchemaAttribute) SetMutability(v string) {
	o.Mutability = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ScimSchemaAttribute) SetName(v string) {
	o.Name = &v
}

// GetReferenceTypes returns the ReferenceTypes field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetReferenceTypes() []string {
	if o == nil || o.ReferenceTypes == nil {
		var ret []string
		return ret
	}
	return *o.ReferenceTypes
}

// SetReferenceTypes gets a reference to the given []string and assigns it to the ReferenceTypes field.
func (o *ScimSchemaAttribute) SetReferenceTypes(v []string) {
	o.ReferenceTypes = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ScimSchemaAttribute) SetRequired(v bool) {
	o.Required = &v
}

// GetReturned returns the Returned field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetReturned() string {
	if o == nil || o.Returned == nil {
		var ret string
		return ret
	}
	return *o.Returned
}

// SetReturned gets a reference to the given string and assigns it to the Returned field.
func (o *ScimSchemaAttribute) SetReturned(v string) {
	o.Returned = &v
}

// GetSubAttributes returns the SubAttributes field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetSubAttributes() []ScimSchemaAttribute {
	if o == nil || o.SubAttributes == nil {
		var ret []ScimSchemaAttribute
		return ret
	}
	return *o.SubAttributes
}

// SetSubAttributes gets a reference to the given []ScimSchemaAttribute and assigns it to the SubAttributes field.
func (o *ScimSchemaAttribute) SetSubAttributes(v []ScimSchemaAttribute) {
	o.SubAttributes = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScimSchemaAttribute) SetType(v string) {
	o.Type = &v
}

// GetUniqueness returns the Uniqueness field value if set, zero value otherwise.
func (o *ScimSchemaAttribute) GetUniqueness() string {
	if o == nil || o.Uniqueness == nil {
		var ret string
		return ret
	}
	return *o.Uniqueness
}

// SetUniqueness gets a reference to the given string and assigns it to the Uniqueness field.
func (o *ScimSchemaAttribute) SetUniqueness(v string) {
	o.Uniqueness = &v
}
