// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: development

package client

import (
	"fmt"
)

// UpgradeTypeType the model 'UpgradeTypeType'.
type UpgradeTypeType string

// List of UpgradeType.Type.
const (
	UPGRADETYPETYPE_MANUAL    UpgradeTypeType = "MANUAL"
	UPGRADETYPETYPE_AUTOMATIC UpgradeTypeType = "AUTOMATIC"
)

// All allowed values of UpgradeTypeType enum.
var AllowedUpgradeTypeTypeEnumValues = []UpgradeTypeType{
	"MANUAL",
	"AUTOMATIC",
}

// NewUpgradeTypeTypeFromValue returns a pointer to a valid UpgradeTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewUpgradeTypeTypeFromValue(v string) (*UpgradeTypeType, error) {
	ev := UpgradeTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UpgradeTypeType: valid values are %v", v, AllowedUpgradeTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v UpgradeTypeType) IsValid() bool {
	for _, existing := range AllowedUpgradeTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UpgradeType.Type value.
func (v UpgradeTypeType) Ptr() *UpgradeTypeType {
	return &v
}
