// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2024-09-16

package client

import (
	"fmt"
)

// PlanType  - BASIC: The Basic plan includes essential operational features, is available in select regions, and offers on-demand capacity, making it ideal for small teams with unpredictable workloads.  - STANDARD: The Standard plan includes standard enterprise security and monitoring features, is available in all supported regions, and offers provisioned pricing, making it the default choice for most CockroachDB production workloads.  - ADVANCED: The Advanced plan is ideal for workloads with stringent isolation, compliance, and security requirements such as CMEK, PCI and HIPAA-readiness, and support for dedicated hardware. Customers are advised to have their account team and/or Cockroach Labs Support <support@cockroachlabs.com> involved when provisioning Advanced clusters.
type PlanType string

// List of Plan.Type.
const (
	PLANTYPE_BASIC    PlanType = "BASIC"
	PLANTYPE_STANDARD PlanType = "STANDARD"
	PLANTYPE_ADVANCED PlanType = "ADVANCED"
)

// All allowed values of PlanType enum.
var AllowedPlanTypeEnumValues = []PlanType{
	"BASIC",
	"STANDARD",
	"ADVANCED",
}

// NewPlanTypeFromValue returns a pointer to a valid PlanType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewPlanTypeFromValue(v string) (*PlanType, error) {
	ev := PlanType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlanType: valid values are %v", v, AllowedPlanTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v PlanType) IsValid() bool {
	for _, existing := range AllowedPlanTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Plan.Type value.
func (v PlanType) Ptr() *PlanType {
	return &v
}
