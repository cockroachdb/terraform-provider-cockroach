// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2024-09-16

package client

import (
	"fmt"
)

// EgressPrivateEndpointDomainNamesStateType the model 'EgressPrivateEndpointDomainNamesStateType'.
type EgressPrivateEndpointDomainNamesStateType string

// List of EgressPrivateEndpointDomainNamesState.Type.
const (
	EGRESSPRIVATEENDPOINTDOMAINNAMESSTATETYPE_EMPTY     EgressPrivateEndpointDomainNamesStateType = "EMPTY"
	EGRESSPRIVATEENDPOINTDOMAINNAMESSTATETYPE_PENDING   EgressPrivateEndpointDomainNamesStateType = "PENDING"
	EGRESSPRIVATEENDPOINTDOMAINNAMESSTATETYPE_AVAILABLE EgressPrivateEndpointDomainNamesStateType = "AVAILABLE"
	EGRESSPRIVATEENDPOINTDOMAINNAMESSTATETYPE_FAILED    EgressPrivateEndpointDomainNamesStateType = "FAILED"
)

// All allowed values of EgressPrivateEndpointDomainNamesStateType enum.
var AllowedEgressPrivateEndpointDomainNamesStateTypeEnumValues = []EgressPrivateEndpointDomainNamesStateType{
	"EMPTY",
	"PENDING",
	"AVAILABLE",
	"FAILED",
}

// NewEgressPrivateEndpointDomainNamesStateTypeFromValue returns a pointer to a valid EgressPrivateEndpointDomainNamesStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewEgressPrivateEndpointDomainNamesStateTypeFromValue(v string) (*EgressPrivateEndpointDomainNamesStateType, error) {
	ev := EgressPrivateEndpointDomainNamesStateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EgressPrivateEndpointDomainNamesStateType: valid values are %v", v, AllowedEgressPrivateEndpointDomainNamesStateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v EgressPrivateEndpointDomainNamesStateType) IsValid() bool {
	for _, existing := range AllowedEgressPrivateEndpointDomainNamesStateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EgressPrivateEndpointDomainNamesState.Type value.
func (v EgressPrivateEndpointDomainNamesStateType) Ptr() *EgressPrivateEndpointDomainNamesStateType {
	return &v
}
