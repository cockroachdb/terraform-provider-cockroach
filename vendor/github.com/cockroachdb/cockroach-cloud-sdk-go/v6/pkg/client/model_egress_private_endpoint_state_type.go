// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2024-09-16

package client

import (
	"fmt"
)

// EgressPrivateEndpointStateType the model 'EgressPrivateEndpointStateType'.
type EgressPrivateEndpointStateType string

// List of EgressPrivateEndpointState.Type.
const (
	EGRESSPRIVATEENDPOINTSTATETYPE_PENDING            EgressPrivateEndpointStateType = "PENDING"
	EGRESSPRIVATEENDPOINTSTATETYPE_PENDING_ACCEPTANCE EgressPrivateEndpointStateType = "PENDING_ACCEPTANCE"
	EGRESSPRIVATEENDPOINTSTATETYPE_AVAILABLE          EgressPrivateEndpointStateType = "AVAILABLE"
	EGRESSPRIVATEENDPOINTSTATETYPE_DELETING           EgressPrivateEndpointStateType = "DELETING"
	EGRESSPRIVATEENDPOINTSTATETYPE_DELETED            EgressPrivateEndpointStateType = "DELETED"
	EGRESSPRIVATEENDPOINTSTATETYPE_REJECTED           EgressPrivateEndpointStateType = "REJECTED"
	EGRESSPRIVATEENDPOINTSTATETYPE_FAILED             EgressPrivateEndpointStateType = "FAILED"
	EGRESSPRIVATEENDPOINTSTATETYPE_EXPIRED            EgressPrivateEndpointStateType = "EXPIRED"
)

// All allowed values of EgressPrivateEndpointStateType enum.
var AllowedEgressPrivateEndpointStateTypeEnumValues = []EgressPrivateEndpointStateType{
	"PENDING",
	"PENDING_ACCEPTANCE",
	"AVAILABLE",
	"DELETING",
	"DELETED",
	"REJECTED",
	"FAILED",
	"EXPIRED",
}

// NewEgressPrivateEndpointStateTypeFromValue returns a pointer to a valid EgressPrivateEndpointStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum.
func NewEgressPrivateEndpointStateTypeFromValue(v string) (*EgressPrivateEndpointStateType, error) {
	ev := EgressPrivateEndpointStateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EgressPrivateEndpointStateType: valid values are %v", v, AllowedEgressPrivateEndpointStateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise.
func (v EgressPrivateEndpointStateType) IsValid() bool {
	for _, existing := range AllowedEgressPrivateEndpointStateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EgressPrivateEndpointState.Type value.
func (v EgressPrivateEndpointStateType) Ptr() *EgressPrivateEndpointStateType {
	return &v
}
