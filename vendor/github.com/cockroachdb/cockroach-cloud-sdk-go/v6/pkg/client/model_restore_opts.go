// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2024-09-16

package client

// RestoreOpts struct for RestoreOpts.
type RestoreOpts struct {
	// Specifies the target database to restore the table into during a table restore operation. If not set, the table will be restored into the database it belonged to in the source backup.
	IntoDb *string `json:"into_db,omitempty"`
	// Specifies the name of the database to create during a database restore operation. If not set, the name defaults to the original database name from the source cluster.
	NewDbName *string `json:"new_db_name,omitempty"`
	// If set, only the schema will be restored and no user data will be included.
	SchemaOnly *bool `json:"schema_only,omitempty"`
	// Allows the restore operation to continue in the event that there are mismatched localities between the backup and target cluster. Useful when restoring multi-region tables to a cluster missing some localities.
	SkipLocalitiesCheck *bool `json:"skip_localities_check,omitempty"`
	// Allows a table to be restored even if it has foreign key constraints referencing rows that no longer exist in the target cluster.
	SkipMissingForeignKeys *bool `json:"skip_missing_foreign_keys,omitempty"`
	SkipMissingSequences   *bool `json:"skip_missing_sequences,omitempty"`
	// Allows the operation to skip restoring views that cannot be restored because their dependencies are not included in the current restore operation.
	SkipMissingViews *bool `json:"skip_missing_views,omitempty"`
}

// NewRestoreOpts instantiates a new RestoreOpts object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreOpts() *RestoreOpts {
	p := RestoreOpts{}
	return &p
}

// GetIntoDb returns the IntoDb field value if set, zero value otherwise.
func (o *RestoreOpts) GetIntoDb() string {
	if o == nil || o.IntoDb == nil {
		var ret string
		return ret
	}
	return *o.IntoDb
}

// SetIntoDb gets a reference to the given string and assigns it to the IntoDb field.
func (o *RestoreOpts) SetIntoDb(v string) {
	o.IntoDb = &v
}

// GetNewDbName returns the NewDbName field value if set, zero value otherwise.
func (o *RestoreOpts) GetNewDbName() string {
	if o == nil || o.NewDbName == nil {
		var ret string
		return ret
	}
	return *o.NewDbName
}

// SetNewDbName gets a reference to the given string and assigns it to the NewDbName field.
func (o *RestoreOpts) SetNewDbName(v string) {
	o.NewDbName = &v
}

// GetSchemaOnly returns the SchemaOnly field value if set, zero value otherwise.
func (o *RestoreOpts) GetSchemaOnly() bool {
	if o == nil || o.SchemaOnly == nil {
		var ret bool
		return ret
	}
	return *o.SchemaOnly
}

// SetSchemaOnly gets a reference to the given bool and assigns it to the SchemaOnly field.
func (o *RestoreOpts) SetSchemaOnly(v bool) {
	o.SchemaOnly = &v
}

// GetSkipLocalitiesCheck returns the SkipLocalitiesCheck field value if set, zero value otherwise.
func (o *RestoreOpts) GetSkipLocalitiesCheck() bool {
	if o == nil || o.SkipLocalitiesCheck == nil {
		var ret bool
		return ret
	}
	return *o.SkipLocalitiesCheck
}

// SetSkipLocalitiesCheck gets a reference to the given bool and assigns it to the SkipLocalitiesCheck field.
func (o *RestoreOpts) SetSkipLocalitiesCheck(v bool) {
	o.SkipLocalitiesCheck = &v
}

// GetSkipMissingForeignKeys returns the SkipMissingForeignKeys field value if set, zero value otherwise.
func (o *RestoreOpts) GetSkipMissingForeignKeys() bool {
	if o == nil || o.SkipMissingForeignKeys == nil {
		var ret bool
		return ret
	}
	return *o.SkipMissingForeignKeys
}

// SetSkipMissingForeignKeys gets a reference to the given bool and assigns it to the SkipMissingForeignKeys field.
func (o *RestoreOpts) SetSkipMissingForeignKeys(v bool) {
	o.SkipMissingForeignKeys = &v
}

// GetSkipMissingSequences returns the SkipMissingSequences field value if set, zero value otherwise.
func (o *RestoreOpts) GetSkipMissingSequences() bool {
	if o == nil || o.SkipMissingSequences == nil {
		var ret bool
		return ret
	}
	return *o.SkipMissingSequences
}

// SetSkipMissingSequences gets a reference to the given bool and assigns it to the SkipMissingSequences field.
func (o *RestoreOpts) SetSkipMissingSequences(v bool) {
	o.SkipMissingSequences = &v
}

// GetSkipMissingViews returns the SkipMissingViews field value if set, zero value otherwise.
func (o *RestoreOpts) GetSkipMissingViews() bool {
	if o == nil || o.SkipMissingViews == nil {
		var ret bool
		return ret
	}
	return *o.SkipMissingViews
}

// SetSkipMissingViews gets a reference to the given bool and assigns it to the SkipMissingViews field.
func (o *RestoreOpts) SetSkipMissingViews(v bool) {
	o.SkipMissingViews = &v
}
