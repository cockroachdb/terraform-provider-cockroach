// Copyright 2023 The Cockroach Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// CockroachDB Cloud API
// API version: 2024-09-16

package client

import (
	"time"
)

// UpdateBlackoutWindowRequest struct for UpdateBlackoutWindowRequest.
type UpdateBlackoutWindowRequest struct {
	// Optional new UTC end time for the blackout window. Can be up to 14 days after the start time. Must not be more than three months after the current time.
	EndTime *time.Time `json:"end_time,omitempty"`
	// Optional new UTC start time for the blackout window. Must be scheduled at least 7 days in advance.
	StartTime *time.Time `json:"start_time,omitempty"`
}

// NewUpdateBlackoutWindowRequest instantiates a new UpdateBlackoutWindowRequest object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateBlackoutWindowRequest() *UpdateBlackoutWindowRequest {
	p := UpdateBlackoutWindowRequest{}
	return &p
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *UpdateBlackoutWindowRequest) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *UpdateBlackoutWindowRequest) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *UpdateBlackoutWindowRequest) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *UpdateBlackoutWindowRequest) SetStartTime(v time.Time) {
	o.StartTime = &v
}
